@using Blazorise
@using Blazorise.Components
@using static AcornSat.Core.Enums

<Modal @ref="filterModal">
    <ModalContent>
        <ModalHeader Background="Background.Light">
            <ModalTitle>Filter</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (SelectedResolution == DataResolution.Yearly)
            {
                <Field>
                    <Tooltip Text="@MostRecentStartYearToolTip">
                        <Check TValue="bool" Checked="@MostRecentStartYear" CheckedChanged="@MostRecentStartYearChanged">Change the start year of the chart to be the most recent start year in the datasets</Check>
                    </Tooltip>
                </Field>
            }

            @if (DatasetYears != null)
            {
                <Field>
                    Selected year(s)
                    <Autocomplete TItem="short"
                              TValue="short"
                              Data="@DatasetYears"
                              TextField="@((item) => item.ToString())"
                              ValueField="@((item) => item)"
                              Multiple
                              SelectedValuesChanged="@OnSelectedYearsChangedInternal"
                              SelectedValues="@SelectedYears"
                              SelectedTexts="@SelectedYearsText">
                        <NotFoundContent>@context was not found</NotFoundContent>
                    </Autocomplete>
                </Field>
            }

            @if (SelectedResolution == DataResolution.Yearly)
            {
                <Field>
                    Start Year
                    <Validation Validator="ValidateYear">
                        <TextEdit Text="@SelectedStartYearInternal" MaskType="MaskType.RegEx" EditMask="^[\d]*$" MaxLength="4" TextChanged="OnStartYearTextChangedInternal">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </Field>
                <Field>
                    End Year
                    <Validation Validator="ValidateYear">
                        <TextEdit Text="@SelectedEndYearInternal" MaskType="MaskType.RegEx" EditMask="^[\d]*$" MaxLength="4" TextChanged="OnEndYearTextChangedInternal" />
                    </Validation>
                </Field>
            }

            @if (SelectedResolution != DataResolution.Yearly)
            {
                <Field>
                    Resolution
                    <Select TValue="DataResolution" SelectedValue="@SelectedResolution" SelectedValueChanged="@OnSelectedResolutionChangedInternal">
                        <SelectItem Value="@(DataResolution.Yearly)">Yearly</SelectItem>
                        <SelectItem Value="@(DataResolution.Monthly)">Monthly</SelectItem>
                        <SelectItem Value="@(DataResolution.Weekly)">Weekly</SelectItem>
                        <SelectItem Value="@(DataResolution.Daily)">Daily</SelectItem>
                    </Select>
                </Field>
            }
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    [Parameter] public bool MostRecentStartYear { get; set; }

    [Parameter] public List<short> DatasetYears { get; set; }
    [Parameter] public List<short> SelectedYears { get; set; }
    [Parameter] public string SelectedStartYear { get; set; }
    [Parameter] public string SelectedEndYear { get; set; }
    [Parameter] public DataResolution SelectedResolution { get; set; }

    [Parameter] public EventCallback<bool> OnMostRecentStartYearChanged { get; set; }
    [Parameter] public EventCallback<List<short>> OnSelectedYearsChanged { get; set; }
    [Parameter] public EventCallback<DataResolution> OnSelectedResolutionChanged { get; set; }
    [Parameter] public EventCallback<string> OnStartYearTextChanged { get; set; }
    [Parameter] public EventCallback<string> OnEndYearTextChanged { get; set; }

    public string SelectedStartYearInternal { get; set; }
    public string SelectedEndYearInternal { get; set; }

    Modal filterModal;

    public List<string> SelectedYearsText = new();

    string MostRecentStartYearToolTip = @"If there is more than one dataset selected for the chart, and this is checked, we will ensure that the chart start year will be the latest start year in the datasets.<br/>
If unchecked, dataset start years will appear on the chart at their original start year.<br/>
For example, rainfall data starts in 1870 and temperature data starts in 1910. Checked, the chart will begin in 1910. Unchecked, the chart will begin in 1870.";

    public async Task Show()
    {
        await filterModal.Show();
    }

    public async Task Hide()
    {
        await filterModal.Hide();
    }

    protected override void OnParametersSet()
    {
        SelectedStartYearInternal = SelectedStartYear;
        SelectedEndYearInternal = SelectedEndYear;

        SelectedYearsText = new();

        base.OnParametersSet();
    }

    async Task OnSelectedYearsChangedInternal(List<short> values)
    {
        await OnSelectedYearsChanged.InvokeAsync(values);
    }

    async Task OnSelectedResolutionChangedInternal(DataResolution value)
    {
        await OnSelectedResolutionChanged.InvokeAsync(value);
    }

    void ValidateYear(ValidatorEventArgs e)
    {
        var year = Convert.ToString(e.Value);

        e.Status =
            string.IsNullOrEmpty(year)
            ? ValidationStatus.None
            :
                year.Length == 4
                ? ValidationStatus.Success
                : ValidationStatus.Error;
    }

    async Task OnStartYearTextChangedInternal(string text)
    {
        SelectedStartYearInternal = text;

        if (text.Length == 0 || text.Length == 4)
        {
            await OnStartYearTextChanged.InvokeAsync(text);
        }
    }

    async Task OnEndYearTextChangedInternal(string text)
    {
        SelectedEndYearInternal = text;

        if (text.Length == 0 || text.Length == 4)
        {
            await OnEndYearTextChanged.InvokeAsync(text);
        }
    }

    async Task MostRecentStartYearChanged(bool value)
    {
        MostRecentStartYear = value;

        await OnMostRecentStartYearChanged.InvokeAsync(value);
    }
}
