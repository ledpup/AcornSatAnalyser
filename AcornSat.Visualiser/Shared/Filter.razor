@using Blazorise
@using Blazorise.Components
@using static AcornSat.Core.Enums

<Modal @ref="filterModal">
    <ModalContent>
        <ModalHeader Background="Background.Light">
            <ModalTitle>Filter</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>

            @if (DatasetYears != null)
            {
                <Field>
                    <strong>Selected year(s)</strong>
                    <Autocomplete TItem="short"
                              TValue="short"
                              Data="@DatasetYears"
                              TextField="@((item) => item.ToString())"
                              ValueField="@((item) => item)"
                              Multiple
                              SelectedValuesChanged="@OnSelectedYearsChangedInternal"
                              SelectedValues="@SelectedYears"
                              SelectedTexts="@SelectedYearsText">
                        <NotFoundContent>@context was not found</NotFoundContent>
                    </Autocomplete>
                </Field>
            }

            @if (SelectedResolution == DataResolution.Yearly)
            {
                <Field>
                    <strong>
                        Start Year
                    </strong>
                    <Tooltip Text="@UseMostRecentStartYearToolTip">
                        <Check TValue="bool" Checked="@UseMostRecentStartYear" CheckedChanged="@UseMostRecentStartYearChanged">@UseMostRecentStartYearLabel</Check>
                    </Tooltip>

                    @if (StartYearOptions != null)
                    {
                        <FieldLabel>
                            Or select a start year:
                        </FieldLabel>

                        <RadioGroup TValue="int" CheckedValue="@StartYearOption" CheckedValueChanged="@OnStartYearOptionChanged">
                            @foreach (var option in StartYearOptions)
                            {
                                <Radio Value="@option.Key">@option.Value</Radio>
                            }
                        </RadioGroup>
                    }
                    <FieldLabel>
                        Or enter a start year:
                    </FieldLabel>
                    <Validation Validator="ValidateYear">
                        <TextEdit Text="@SelectedStartYearInternal" MaskType="MaskType.RegEx" EditMask="^[\d]*$" MaxLength="4" TextChanged="OnStartYearTextChangedInternal">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Validation>
                </Field>
                <Field>
                    <strong>End Year</strong>
                    <Validation Validator="ValidateYear">
                        <TextEdit Text="@SelectedEndYearInternal" MaskType="MaskType.RegEx" EditMask="^[\d]*$" MaxLength="4" TextChanged="OnEndYearTextChangedInternal" />
                    </Validation>
                </Field>
            }

            @if (SelectedResolution != DataResolution.Yearly)
            {
                <Field>
                    Resolution
                    <Select TValue="DataResolution" SelectedValue="@SelectedResolution" SelectedValueChanged="@OnSelectedResolutionChangedInternal">
                        <SelectItem Value="@(DataResolution.Yearly)">Yearly</SelectItem>
                        <SelectItem Value="@(DataResolution.Monthly)">Monthly</SelectItem>
                        <SelectItem Value="@(DataResolution.Weekly)">Weekly</SelectItem>
                        <SelectItem Value="@(DataResolution.Daily)">Daily</SelectItem>
                    </Select>
                </Field>
            }
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    [Parameter] public bool UseMostRecentStartYear { get; set; }
    [Parameter] public List<short> StartYears { get; set; }

    [Parameter] public List<short> DatasetYears { get; set; }
    [Parameter] public List<short> SelectedYears { get; set; }
    [Parameter] public string SelectedStartYear { get; set; }
    [Parameter] public string SelectedEndYear { get; set; }
    [Parameter] public DataResolution SelectedResolution { get; set; }

    [Parameter] public EventCallback<bool> OnUseMostRecentStartYearChanged { get; set; }
    [Parameter] public EventCallback<List<short>> OnSelectedYearsChanged { get; set; }
    [Parameter] public EventCallback<DataResolution> OnSelectedResolutionChanged { get; set; }
    [Parameter] public EventCallback<string> OnStartYearTextChanged { get; set; }
    [Parameter] public EventCallback<string> OnEndYearTextChanged { get; set; }

    public string SelectedStartYearInternal { get; set; }
    public string SelectedEndYearInternal { get; set; }

    int StartYearOption = -1;

    Dictionary<int, string> StartYearOptions { get; set; }

    Modal filterModal;

    public List<string> SelectedYearsText = new();

    string UseMostRecentStartYearToolTip = @"If there is more than one dataset selected for the chart, and this is checked, we will ensure that the chart start year will be the most recent start year of the datasets.<br/>
If unchecked, the chart start year will appear on the chart from the oldest start year.<br/>
For example, rainfall data starts in 1870 and temperature data starts in 1910. Checked, the chart will begin in 1910. Unchecked, the chart will begin in 1870.";
    string UseMostRecentStartYearLabel = "Dynamically set the start year of the chart to be the most recent start year across all the datasets on the chart";
    public async Task Show()
    {
        await filterModal.Show();
    }

    public async Task Hide()
    {
        await filterModal.Hide();
    }


    protected override async void OnParametersSet()
    {
        SelectedStartYearInternal = SelectedStartYear;
        SelectedEndYearInternal = SelectedEndYear;

        SelectedYearsText = new();

        if (StartYears != null)
        {
            if (StartYearOptions == null || string.Join(',', StartYears) != string.Join(',', StartYearOptions.Values))
            {
                StartYearOptions = new Dictionary<int, string>();
                for (var i = 0; i < StartYears.Count; i++)
                {
                    StartYearOptions.Add(i, StartYears[i].ToString());
                }
                StartYearOption = -1;
            }
        }

        base.OnParametersSet();
    }

    async Task OnSelectedYearsChangedInternal(List<short> values)
    {
        await OnSelectedYearsChanged.InvokeAsync(values);
    }

    async Task OnSelectedResolutionChangedInternal(DataResolution value)
    {
        await OnSelectedResolutionChanged.InvokeAsync(value);
    }

    void ValidateYear(ValidatorEventArgs e)
    {
        var year = Convert.ToString(e.Value);

        e.Status =
            string.IsNullOrEmpty(year)
            ? ValidationStatus.None
            :
                year.Length == 4
                ? ValidationStatus.Success
                : ValidationStatus.Error;
    }

    async Task OnStartYearTextChangedInternal(string text)
    {
        if (SelectedStartYearInternal == text)
        {
            return;
        }

        SelectedStartYearInternal = text;
        if (text.Length == 0 || text.Length == 4)
        {
            await UseMostRecentStartYearChanged(false);
            StartYearOption = -1;
            await OnStartYearTextChanged.InvokeAsync(text);
        }
    }

    async Task OnEndYearTextChangedInternal(string text)
    {
        SelectedEndYearInternal = text;

        if (text.Length == 0 || text.Length == 4)
        {
            await OnEndYearTextChanged.InvokeAsync(text);
        }
    }

    async Task OnStartYearOptionChanged(int value)
    {
        StartYearOption = value;
        if (StartYearOption != -1)
        {
            await UseMostRecentStartYearChanged(false);
            SelectedStartYearInternal = StartYearOptions[value];
            await OnStartYearTextChanged.InvokeAsync(StartYearOptions[value]);
        }
    }

    async Task UseMostRecentStartYearChanged(bool value)
    {
        UseMostRecentStartYear = value;
        if (UseMostRecentStartYear)
        {
            SelectedStartYearInternal = null;
            await OnStartYearTextChanged.InvokeAsync(SelectedStartYearInternal);
            StartYearOption = -1;
        }
        await OnUseMostRecentStartYearChanged.InvokeAsync(value);
    }
}
