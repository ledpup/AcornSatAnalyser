@using AcornSat.Core
@using Blazorise
@using static AcornSat.Core.Enums

<div class="location-header">
    @Location.Name
            
    <a class="location-header-link" @onclick="ChangeLocationClicked">Change Location</a>
</div>

<Collapsible Title="Overview" OnShowOrHide="OverviewShowOrHideHandler">
    <Content>
        <OverviewField Label="Location"><Value> <span><a href="@LocationMapUrl" target="_blank">@LocationAsString</a></span></Value></OverviewField>
        <OverviewField Label="Elevation"><Value>@ElevationAsString</Value></OverviewField>
        <OverviewField Label="Station id">
            <Value>
                @{
                    bool firstSite = true;
                    foreach (var site in Location.Sites)
                    {
                        if (!firstSite)
                        {
                            <span>, </span>
                        }
                        else
                        {
                            firstSite = false;
                        }

                        if (DataSet.StationInfoUrl != null)
                        {
                            <span><a href="@DataSet.StationInfoUrl.Replace("[station]", site)" target="_blank">@site</a></span>
                        }
                        else
                        {
                            <span>@(site)</span>
                        }
                    }
                }
            </Value>
        </OverviewField>

        <OverviewField Label="Dataset">
            <Value>
                @if (!String.IsNullOrWhiteSpace(DataSet.MoreInformationUrl))
                {
                    <a href="@DataSet.MoreInformationUrl" target="_blank">@DataSet.Name</a>
                }
                else
                {
                    @DataSet.Name
                }
            </Value>
        </OverviewField>
        <WarmingStripe DataRecords="@dataRecords" />
        <WarmestYears DataRecords="@dataRecords" />
    </Content>
</Collapsible>



@code {

    [Inject]
    public IDataService DataService { get; set; }

    [Parameter]
    public Location Location { get; set; }

    [Parameter]
    public DataSetDefinition DataSet { get; set; }

    [Parameter]
    public EventCallback RequestLocationChange { get; set; }

    [Parameter]
    public EventCallback<bool> OnOverviewShowOrHide { get; set; }

    string LocationMapUrl => $"https://maps.google.com/?q={Location.Coordinates.Latitude},{Location.Coordinates.Longitude}";
    string LocationAsString => $"{Math.Round(Location.Coordinates.Latitude, 1)}°, {Math.Round(Location.Coordinates.Longitude, 1)}°";
    string ElevationAsString => $"{Math.Round(Location.Coordinates.Elevation, 1)}m";

    List<DataRecord> dataRecords { get; set; }

    void ChangeLocationClicked(EventArgs args)
    {
        RequestLocationChange.InvokeAsync();
    }

    void OverviewShowOrHideHandler(bool showOrHide)
    {
        OnOverviewShowOrHide.InvokeAsync(showOrHide);
    }

    protected override async Task OnParametersSetAsync()
    {
        var dataAdjustment = Enums.DataAdjustment.Unadjusted;
        if (DataSet.DataAdjustments.Any(x => x == Enums.DataAdjustment.Adjusted))
        {
            dataAdjustment = Enums.DataAdjustment.Adjusted;
        }
        
        var dataset = await DataService.GetDataSet(DataType.TempMax, DataResolution.Yearly, dataAdjustment, Location.Id, AggregationMethod.GroupByDayThenAverage_Relative);
        dataRecords = dataset.Single().DataRecords.Where(x => x.Value != null).ToList();

        await base.OnParametersSetAsync();
    }
}
