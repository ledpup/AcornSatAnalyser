@using AcornSat.Core
@using AcornSat.Core.ViewModel
@using Blazorise
@using static AcornSat.Core.Enums

<div class="location-header">
    @Location.Name
            
    <a class="location-header-link" @onclick="ChangeLocationClicked">Change Location</a>
</div>

<Collapsible Title="Overview" OnShowOrHide="OverviewShowOrHideHandler">
    <Content>
        <!-- The awful HTML comments between OverviewField elements below are to avoid generating whitespace between OverviewField elements, which was
             causing them to be misaligned. Probably better to use flex layout, but this works for now.
        -->
        <OverviewField Label="Location"><Value> <span><a href="@LocationMapUrl" target="_blank">@LocationAsString</a></span></Value></OverviewField><!--
     --><OverviewField Label="Elevation"><Value>@ElevationAsString</Value></OverviewField><!--
     --><OverviewField Label="Station id">
            <Value>
                @{
                    bool firstSite = true;
                    foreach (var site in Location.Sites)
                    {
                        if (!firstSite)
                        {
                            <span>, </span>
                        }
                        else
                        {
                            firstSite = false;
                        }

                        if (DataSetDefinition.StationInfoUrl != null)
                        {
                            <span><a href="@DataSetDefinition.StationInfoUrl.Replace("[station]", site)" target="_blank">@site</a></span>
                        }
                        else
                        {
                            <span>@(site)</span>
                        }
                    }
                }
            </Value>
        </OverviewField><!--
     --><OverviewField Label="Dataset">
            <Value>
                @if (!String.IsNullOrWhiteSpace(DataSetDefinition.MoreInformationUrl))
                {
                    <a href="@DataSetDefinition.MoreInformationUrl" target="_blank">@DataSetDefinition.Name</a>
                }
                else
                {
                    @DataSetDefinition.Name
                }
            </Value>
        </OverviewField>
        @if (dataSet != null)
        {
            <OverviewField Label="Warming index" Title="@dataSet.WarmingIndexDescription"><Value>@dataSet.WarmingIndexAsString</Value></OverviewField>
        }
        <OverviewField Label="Heating Score" ><Value>@Location.HeatingScore</Value></OverviewField>
        <WarmingStripe DataRecords="@dataRecordsRelative" />
        <WarmestYears DataRecords="@dataRecordsRelative" />
    </Content>
</Collapsible>



@code {

    [Inject]
    public IDataService DataService { get; set; }

    [Parameter]
    public Location Location { get; set; }

    [Parameter]
    public DataSetDefinitionViewModel DataSetDefinition { get; set; }

    [Parameter]
    public EventCallback RequestLocationChange { get; set; }

    [Parameter]
    public EventCallback<bool> OnOverviewShowOrHide { get; set; }

    string LocationMapUrl => $"https://maps.google.com/?q={Location.Coordinates.Latitude},{Location.Coordinates.Longitude}";
    string LocationAsString => $"{Math.Round(Location.Coordinates.Latitude, 1)}°, {Math.Round(Location.Coordinates.Longitude, 1)}°";
    string ElevationAsString => $"{Math.Round(Location.Coordinates.Elevation, 1)}m";

    DataSet dataSet { get; set; }
    List<DataRecord> dataRecordsRelative { get; set; }


    void ChangeLocationClicked(EventArgs args)
    {
        RequestLocationChange.InvokeAsync();
    }

    void OverviewShowOrHideHandler(bool showOrHide)
    {
        OnOverviewShowOrHide.InvokeAsync(showOrHide);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (dataSet != null && dataSet.Location.Id == Location.Id)
        {
            return;
        }

        var dataAdjustment = Enums.DataAdjustment.Unadjusted;
        if (DataSetDefinition.MeasurementDefinitions.Any(x => x.DataType == DataType.TempMax && x.DataAdjustment == Enums.DataAdjustment.Adjusted))
        {
            dataAdjustment = Enums.DataAdjustment.Adjusted;
        }

        {
            var datasets = await DataService.GetDataSet(DataType.TempMax, DataResolution.Yearly, dataAdjustment, AggregationMethod.GroupByDayThenAverage_Anomaly, Location.Id);
            var dataset = datasets.Single();
            dataRecordsRelative = dataset.DataRecords.Where(x => x.Value != null).ToList();
        }

        dataSet = (await DataService.GetDataSet(DataType.TempMax, DataResolution.Yearly, dataAdjustment, AggregationMethod.GroupByDayThenAverage, Location.Id)).SingleOrDefault();

        await base.OnParametersSetAsync();
    }
}
