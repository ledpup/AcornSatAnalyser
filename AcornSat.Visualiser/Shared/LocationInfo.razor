@using AcornSat.Core
@using AcornSat.Core.ViewModel
@using Blazorise
@using static AcornSat.Core.Enums

<Collapsible Title="@Location.Name" OnShowOrHide="OverviewShowOrHideHandler" InitiallyShown="true" CollapserSize="Collapsible.CollapserSizes.ExtraLarge">
    <Content>
        <!-- The awful HTML comments between OverviewField elements below are to avoid generating whitespace between OverviewField elements, which was
             causing them to be misaligned. Probably better to use flex layout, but this works for now.
        -->
        <OverviewField Label="Location"><Value> <span><a href="@LocationMapUrl" target="_blank">@LocationAsString</a></span></Value></OverviewField><!--
     --><OverviewField Label="Elevation"><Value>@ElevationAsString</Value></OverviewField><!--
     -->@if (_maxTempAbsoluteRecords != null)
        {
            <OverviewField Label="Warming index" PopupText="@_maxTempAbsoluteRecords.WarmingIndexDescription"><Value>@_maxTempAbsoluteRecords.WarmingIndexAsString</Value></OverviewField>
        }
        <OverviewField Label="Heating score" PopupText="@HeatingScoreDescription"><Value>@Location.HeatingScore</Value></OverviewField>
        <WarmingStripe DataRecords="@_maxTempAnomalyRecords" />
        <WarmestYears DataRecords="@_maxTempAnomalyRecords" />
    </Content>
</Collapsible>



@code {
    [Inject]
    ILogger<LocationInfo> Logger { get; set; }

    [Inject]
    public IDataService DataService { get; set; }

    [Parameter]
    public Location Location { get; set; }

    [Parameter]
    public EventCallback RequestLocationChange { get; set; }

    [Parameter]
    public IEnumerable<DataSetDefinitionViewModel> DataSetDefinitions { get; set; }

    [Parameter]
    public EventCallback<bool> OnOverviewShowOrHide { get; set; }

    Guid instanceId = Guid.NewGuid();

    string LocationMapUrl => $"https://maps.google.com/?q={Location.Coordinates.Latitude},{Location.Coordinates.Longitude}";
    string LocationAsString => $"{Math.Round(Location.Coordinates.Latitude, 1)}°, {Math.Round(Location.Coordinates.Longitude, 1)}°";
    string ElevationAsString => $"{Math.Round(Location.Coordinates.Elevation, 1)}m";

    DataSet _maxTempAbsoluteRecords { get; set; }
    List<DataRecord> _maxTempAnomalyRecords { get; set; }

    Guid? locationIdLastTimeOnParametersSetAsyncWasCalled;

    const string HeatingScoreDescription = @"<p>The heating score is a number typically between 0 and 9. It is derived from comparing all warming indexes across the locations in the dataset. The highest warming index is used to standardise the values.</p>
<p>To calculate the heating score:</p>
<ul><li>For warming indexes that are greater than zero, divide the warming index by the maximum warming index in the set, multiple by 9 and round to zero decimal places.</li>
<li>For warming indexes that are less than zero, the only operation done is to round the number to zero demical places.</li></ul>
<p>The score may be higher if:</p>
<ul><li>The location is inland. The ocean is warming more slowly compared with the land. Coastal locations are therefore likely to have warmed less than inland locations.</li>
<li>The station(s) has been operating for a long time. The effect of global warming is more obvious with a large dataset as temperatures in the past were cooler.</li>";

    public void ChangeLocationClicked(EventArgs args)
    {
        RequestLocationChange.InvokeAsync();
    }

    void OverviewShowOrHideHandler(bool showOrHide)
    {
        OnOverviewShowOrHide.InvokeAsync(showOrHide);
    }

    protected override async Task OnParametersSetAsync()
    {
        // We do manual change detection here because Blazor calls OnParametersSetAsync() repeatedly with the same input values.
        if (locationIdLastTimeOnParametersSetAsyncWasCalled == Location?.Id)
        {
            return;
        }

        // We can't do anything until we're supplied our tasty, tasty DataSetDefinitions
        if (DataSetDefinitions == null)
        {
            return;
        }

        locationIdLastTimeOnParametersSetAsyncWasCalled = Location?.Id;

        if (Location != null)
        {
            var tempMaxMeasurementForLocation = 
                DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(
                    DataSetDefinitions,
                    Location.Id,
                    DataType.TempMax,
                    Enums.DataAdjustment.Adjusted,
                    true);

            if (tempMaxMeasurementForLocation == null)
            {
                _maxTempAnomalyRecords = null;
                _maxTempAbsoluteRecords = null;
            }
            else
            {
                // Retrieve TempMax anomaly
                var tempMaxAnomalyRecords = await DataService.GetDataSet(DataType.TempMax, DataResolution.Yearly, tempMaxMeasurementForLocation.Item2.DataAdjustment, AggregationMethod.GroupByDayThenAverage_Anomaly, Location.Id);

                // Filter to records that have values
                _maxTempAnomalyRecords = tempMaxAnomalyRecords.DataRecords.Where(x => x.Value != null).ToList();

                // Retrieve TempMax absolute
                _maxTempAbsoluteRecords = await DataService.GetDataSet(DataType.TempMax, DataResolution.Yearly, tempMaxMeasurementForLocation.Item2.DataAdjustment, AggregationMethod.GroupByDayThenAverage, Location.Id);
            }
        }

        await base.OnParametersSetAsync();
    }
}
