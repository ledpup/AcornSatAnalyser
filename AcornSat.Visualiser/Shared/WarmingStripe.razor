@using static AcornSat.Core.Enums

<div class="warming-stripe">
    @if (DataRecords != null)
    {
        foreach (var record in DataRecords)
        {
            <div title="@GetTitle(record.Value.Value)" class="single-stripe" style="background-color: @GetColour(record.Value.Value);">
                <div class="label">
                    <div class="year" style="color: @GetTextColour(record.Value.Value, "#ccc", "#333")">@record.Year</div>
                    <div class="amt" style="color: @GetTextColour(record.Value.Value, "#eee", "#555")">@GetRelativeTemp(record)</div>
                </div>
            </div>
        }
    }
</div>

@code {

    [Parameter]
    public List<DataRecord> DataRecords { get; set; }

    float min;
    float max;

    protected override async Task OnParametersSetAsync()
    {
        if (DataRecords != null)
        {
            DataRecords = DataRecords.Where(x => x.Value.HasValue).ToList();

            min = DataRecords.Min(x => x.Value.Value);
            max = DataRecords.Max(x => x.Value.Value);

            // If the max and min are not above or below 1, set them to 1
            // This will wash out the colours on a stripe where the values don't deviate much from the average
            // This is okay because we don't want it to look like extreme heating/cooling unless there are larger variations
            min = min < -1 ? min : -1;
            max = max > 1 ? max : 1;
        }

        await base.OnParametersSetAsync();
    }


    string GetColour(float value)
    {
        if (value > 0)
        {
            return $"rgba(255, {255 - ((Math.Abs(value / max)) * 255)}, {255 - ((Math.Abs(value / max)) * 255)}, 75%)";
        }
        else
        {
            return $"rgba({255 - ((Math.Abs(value / max)) * 255)}, {255 - ((Math.Abs(value / max)) * 255)}, 255, 75%)";
        }
    }

    string GetRelativeTemp(DataRecord r) => $"{(r.Value.Value >= 0 ? "+" : "")}{MathF.Round(r.Value.Value, 1)}°C";

    string GetTitle(float value)
    {
        var aboveOrBelow = value > 0 ? "above" : "below";
        return $"{MathF.Round(value, 1)}°C {aboveOrBelow} average";
    }

    string GetTextColour(float value, string lightTextColour, string darkTextColour)
    {
        return MathF.Round(value, 1) <= min / 2 ? lightTextColour : darkTextColour;
    }
}
