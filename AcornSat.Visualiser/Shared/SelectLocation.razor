@using Blazorise
@using Blazorise.Components
@using GeoCoordinatePortable

<Modal @ref="modal">
    <ModalContent>
        <ModalHeader Background="Background.Light">
            <ModalTitle>Select Location</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (SelectedLocation != null)
            {
                <Field>
                    Current Location: @SelectedLocation.Name
                </Field>
            }
            <Field>
                <Button Clicked="@OnUseCurrentLocation" Color="Color.Primary">Use Your Location</Button>
            </Field>
            <Field> 
            </Field>
            <Field>
                <FieldLabel>Select a location from the list</FieldLabel>
                <SelectList
                    TItem="Location"
                    TValue="Guid"
                    Data="@Locations"
                    TextField="@((item)=>item.Name)"
                    ValueField="@((item)=>item.Id)"
                    SelectedValueChanged="@OnLocationChange"
                    DefaultItemText="Select Location"
                    Style="width: 100%"
                    />
           </Field>
            @if (SelectedLocation != null)
            {
                <Field>
                    <FieldLabel>Select a nearby location</FieldLabel>
                    <Alert Color="Color.Secondary" Visible="true">
                        <Repeater Items="@SelectedLocation.NearbyLocations" >
                            <div>
                                <Blazorise.Link 
                                    Title="@context.LocationName" 
                                    To="#" 
                                    Clicked="@(()=>FireOnLocationChange(context.LocationId))">@context.LocationName</Blazorise.Link>

                                <span style="color: #888">
                                    @context.Distance km
                                    @context.CompassRoseDirection 
                                    <span style="display: inline-block; transform: rotate(@($"{context.BearingDegrees}deg"))">⭡</span>
                                </span>
                            </div>
                        </Repeater>
                    </Alert>
                </Field>
            }
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    Modal? modal;

    [Parameter]
    public IEnumerable<Location> Locations { get; set; }

    [Parameter]
    public Location SelectedLocation { get; set; }

    [Parameter]
    public EventCallback<Guid> OnLocationChange { get; set; }

    [Inject]
    public IJSRuntime JS { get; init; }

    public Task Show(
    )
    {
        return modal.Show();
    }

    public Task Hide()
    {
        return modal.Hide();
    }

    class GetLocationResult
    {
        public float Latitude { get; set; }
        public float Longitude { get; set; }

        public int ErrorCode { get; set; }
        public string ErrorMessage { get; set; }
    }

    async Task OnUseCurrentLocation()
    {
        var loc = await JS.InvokeAsync<GetLocationResult>("getLocation");

        var geoCoord = new GeoCoordinate(loc.Latitude, loc.Longitude);

        var distances = Location.GetDistances(geoCoord, Locations);
        var closestLocation = distances.OrderBy(x => x.Distance).First();

        await FireOnLocationChange(closestLocation.LocationId);
    }

    async Task FireOnLocationChange(Guid locationId)
    {
        await OnLocationChange.InvokeAsync(locationId);
    }
}
