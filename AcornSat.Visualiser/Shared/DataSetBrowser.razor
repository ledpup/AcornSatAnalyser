@using AcornSat.Visualiser.UiModel
@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts
@using static AcornSat.Core.Enums

@foreach (var f in RootFolders)
{
    <div class="dataset-folder">
        <div class="dataset-folder-name">@f.Name</div>
        @foreach (var ds in f.DataSets)
        {
            <div class="entry-list">
                <a class="add-dataset" @onclick="() => AddDataSet(ds)"><span class="oi oi-plus" aria-hidden="true"></span></a> <span class="dataset-name">@ds.Name</span>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public EventCallback<DataSetLibraryEntry> OnAddDataSet { get; set; }

    [Parameter]
    public Location? CurrentLocation { get; set; }

    List<DataSetLibraryFolder> RootFolders { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        RootFolders = new List<DataSetLibraryFolder>();

        if (CurrentLocation != null)
        {
            var currentLocationFolder = 
                new DataSetLibraryFolder()
                {
                    Name = CurrentLocation.Name + " observations",
                    DataSets = new List<DataSetLibraryEntry>()
                };

            currentLocationFolder.DataSets.Add(
                new DataSetLibraryEntry()
                {
                    DataType = DataType.TempMax,
                    DataAdjustment = DataAdjustment.Adjusted,
                    SourceDataSetId = CurrentLocation.DataSetId,
                    LocationId = CurrentLocation.Id,
                    LocationName = CurrentLocation.Name,
                    Name = "Temperature | Daily maximum | Adjusted"
                });

            currentLocationFolder.DataSets.Add(
                new DataSetLibraryEntry()
                {
                    DataType = DataType.TempMax,
                    DataAdjustment = DataAdjustment.Unadjusted,
                    SourceDataSetId = CurrentLocation.DataSetId,
                    LocationId = CurrentLocation.Id,
                    LocationName = CurrentLocation.Name,
                    Name = "Temperature | Daily maximum | Unadjusted"
                });

            currentLocationFolder.DataSets.Add(
                new DataSetLibraryEntry()
                {
                    DataType = DataType.TempMax,
                    DataAdjustment = DataAdjustment.Difference,
                    SourceDataSetId = CurrentLocation.DataSetId,
                    LocationId = CurrentLocation.Id,
                    LocationName = CurrentLocation.Name,
                    Name = "Temperature | Daily maximum | Adjustment"
                });

            currentLocationFolder.DataSets.Add(
                new DataSetLibraryEntry()
                {
                    DataType = DataType.TempMin,
                    DataAdjustment = DataAdjustment.Adjusted,
                    SourceDataSetId = CurrentLocation.DataSetId,
                    LocationId = CurrentLocation.Id,
                    LocationName = CurrentLocation.Name,
                    Name = "Temperature | Daily minimum | Adjusted"
                });

            currentLocationFolder.DataSets.Add(
                new DataSetLibraryEntry()
                {
                    DataType = DataType.TempMin,
                    DataAdjustment = DataAdjustment.Unadjusted,
                    SourceDataSetId = CurrentLocation.DataSetId,
                    LocationId = CurrentLocation.Id,
                    LocationName = CurrentLocation.Name,
                    Name = "Temperature | Daily minimum | Unadjusted"
                });

            currentLocationFolder.DataSets.Add(
                new DataSetLibraryEntry()
                {
                    DataType = DataType.TempMin,
                    DataAdjustment = DataAdjustment.Difference,
                    SourceDataSetId = CurrentLocation.DataSetId,
                    LocationId = CurrentLocation.Id,
                    LocationName = CurrentLocation.Name,
                    Name = "Temperature | Daily minimum | Adjustment"
                });

            currentLocationFolder.DataSets.Add(
                new DataSetLibraryEntry()
                {
                    DataType = DataType.Rainfall,
                    DataAdjustment = DataAdjustment.Unadjusted,
                    SourceDataSetId = CurrentLocation.DataSetId,
                    LocationId = CurrentLocation.Id,
                    LocationName = CurrentLocation.Name,
                    Name = "Rainfall"
                });

            RootFolders.Add(currentLocationFolder);
        }

        RootFolders.AddRange(
            new DataSetLibraryFolder[]
            {
                new DataSetLibraryFolder
                {
                    Name = "Atmospheric gases",
                    DataSets =
                        new List<DataSetLibraryEntry>()
                        {
                            new DataSetLibraryEntry()
                            {
                                Name = "CO₂ (Carbon Dioxide) adjusted parts per million",
                                SourceDataSetId = Guid.Parse("42c9195e-edc0-4894-97dc-923f9d5e72f0"),
                                DataAdjustment = DataAdjustment.Adjusted,
                                DataType = DataType.CO2
                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "CH₄ (Methane) adjusted parts per billion",
                                SourceDataSetId = Guid.Parse("2debe203-cbaa-4015-977c-2f40e2782547"),
                                DataAdjustment = DataAdjustment.Adjusted,
                                DataType = DataType.CH4
                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "N₂O (Nitrous Oxide) adjusted parts per billion",
                                SourceDataSetId = Guid.Parse("6e84e743-3c77-488f-8a1c-152306c3d6f0"),
                                DataAdjustment = DataAdjustment.Adjusted,
                                DataType = DataType.N2O
                            }
                        }
                },
                new DataSetLibraryFolder
                {
                    Name = "ENSO",
                    DataSets =
                        new List<DataSetLibraryEntry>()
                        {
                            new DataSetLibraryEntry()
                            {
                                Name = "Multivariate ENSO index (MEI.v2)",
                                SourceDataSetId = Guid.Parse("ffd5f5e2-d8df-4779-a7f4-f5d148505033"),
                                DataAdjustment = DataAdjustment.Unadjusted,
                                DataType = DataType.MEIv2
                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "Southern Oscillation Index (SOI)",
                                SourceDataSetId = Guid.Parse("c31270fa-b207-4d8f-b68e-4995698f1a4d"),
                                DataAdjustment = DataAdjustment.Unadjusted,
                                DataType = DataType.SOI
                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "Niño 3.4",
                                SourceDataSetId = Guid.Parse("bfbaa69b-c10d-4de3-a78c-1ed6ff307327"),
                                DataAdjustment = DataAdjustment.Unadjusted,
                                DataType = DataType.Nino34
                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "Oceanic Niño Index (ONI)",
                                SourceDataSetId = Guid.Parse("1042147a-8625-4ee7-bb5a-f0f17795c393"),
                                DataAdjustment = DataAdjustment.Unadjusted,
                                DataType = DataType.ONI
                            }
                        }
                }
                }
        );
    }



    async void AddDataSet(DataSetLibraryEntry dle)
    {
        await OnAddDataSet.InvokeAsync(dle);
    }
}
