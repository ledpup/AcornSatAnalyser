@using AcornSat.Visualiser.UiModel
@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts

<div class="chart-series-config">
    <div class="title">@ChartSeries.FriendlyTitle</div>

    <table>
        @if (ChartSeries.Year.HasValue)
        {
            <tr>
                <td>Filter to year:</td>
                <td>@ChartSeries.Year</td>
            </tr>
        }
        <tr>
            <td>Smoothing:</td>
            <td>
                <Select TValue="SeriesSmoothingOptions" 
                        Size="Size.ExtraSmall"
                        SelectedValue="@ChartSeries.Smoothing"
                        SelectedValueChanged="@OnSmoothingChanged">
                    <SelectItem Value="SeriesSmoothingOptions.None">None</SelectItem>
                    <SelectItem Value="SeriesSmoothingOptions.MovingAverage">Moving average</SelectItem>
                </Select>
            </td>
        </tr>
        <tr>
            <td>Smoothing window:</td>
            <td>
                <Select TValue="int"
                        Size="Size.ExtraSmall"
                        SelectedValue="@ChartSeries.SmoothingWindow"
                        SelectedValueChanged="@OnSmoothingWindowChanged"
                        Disabled="@ShouldDisableSmoothingWindow(ChartSeries)">
                    <SelectItem Value="3">3</SelectItem>
                    <SelectItem Value="5">5</SelectItem>
                    <SelectItem Value="7">7</SelectItem>
                    <SelectItem Value="10">10</SelectItem>
                    <SelectItem Value="15">15</SelectItem>
                    <SelectItem Value="20">20</SelectItem>
                </Select>
            </td>
        </tr>
        <tr>
            <td>Display value:</td>
            <td>
                <Select TValue="SeriesValueOptions" 
                        Size="Size.ExtraSmall"
                        SelectedValue="@ChartSeries.Value"
                        SelectedValueChanged="@OnValueChanged">
                    <SelectItem Value="SeriesValueOptions.Value">Value</SelectItem>
                    <SelectItem Value="SeriesValueOptions.AnomalyRelativeToMean">Anomaly relative to mean</SelectItem>
                </Select>
            </td>
        </tr>
        <tr>
            <td>Display style:</td>
            <td>
                <Select TValue="SeriesDisplayStyle" 
                        Size="Size.ExtraSmall"
                        SelectedValue="@ChartSeries.DisplayStyle"
                        SelectedValueChanged="@OnDisplayStyleChanged">
                    <SelectItem Value="SeriesDisplayStyle.Line">Line</SelectItem>
                    <SelectItem Value="SeriesDisplayStyle.Bar">Bar</SelectItem>
                </Select>
            </td>
        </tr>
        <tr>
            <td>Lock?</td>
            <td>
                <Check TValue="bool" Checked="@ChartSeries.IsLocked" CheckedChanged="@OnIsLockedChanged"></Check>
            </td>
        </tr>
    </table>

    <br>
    <br />
    <a class="series-action remove-series" @onclick="@OnRemoveSeriesClicked">Remove series</a>

    <a class="series-action duplicate-series" @onclick="@OnDuplicateSeriesClicked">Duplicate series</a>
</div>


@code {
    [Parameter]
    public ChartSeriesDefinition ChartSeries { get; set; }

    [Parameter]
    public EventCallback OnSeriesChanged { get; set; }

    [Parameter]
    public EventCallback<ChartSeriesDefinition> OnDuplicateSeries { get; set; }

    [Parameter]
    public EventCallback<ChartSeriesDefinition> OnRemoveSeries { get; set; }

    bool ShouldDisableSmoothingWindow(ChartSeriesDefinition csd)
    {
        return csd.Smoothing != SeriesSmoothingOptions.MovingAverage;
    }

    async Task OnDuplicateSeriesClicked()
    {
        await OnDuplicateSeries.InvokeAsync(ChartSeries);
    }

    async Task OnRemoveSeriesClicked()
    {
        await OnRemoveSeries.InvokeAsync(ChartSeries);
    }

    async Task OnSmoothingChanged(SeriesSmoothingOptions o)
    {
        ChartSeries.Smoothing = o;

        await OnSeriesChanged.InvokeAsync();
    }

    async Task OnSmoothingWindowChanged(int w)
    {
        ChartSeries.SmoothingWindow = w;

        await OnSeriesChanged.InvokeAsync();
    }

    async Task OnValueChanged(SeriesValueOptions o)
    {
        ChartSeries.Value = o;

        await OnSeriesChanged.InvokeAsync();
    }

    async Task OnDisplayStyleChanged(SeriesDisplayStyle s)
    {
        ChartSeries.DisplayStyle = s;

        await OnSeriesChanged.InvokeAsync();
    }

    async Task OnIsLockedChanged(bool val)
    {
        ChartSeries.IsLocked = val;
    }
}
