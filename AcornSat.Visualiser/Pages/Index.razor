@page "/"
@using AcornSat.Core
@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts
@using System.IO;

<PageTitle>Index</PageTitle>

 @*<h1><a href="http://www.bom.gov.au/climate/data/acorn-sat/" target="_blank">ACORN-SAT</a></h1>*@
<Row>
    <Column ColumnSize="ColumnSize.Is2">
        <SelectList
            TItem="Location"
            TValue="Guid"
            Data="@Locations"
            TextField="@((item)=>item.Name)"
            ValueField="@((item)=>item.Id)"
            SelectedValueChanged="@SelectedLocationChanged"
            DefaultItemText="Select ACORN-SAT Location"
            Style="width: 100%"
            />
        <Alert Color="Color.Primary" Visible="true">
            <FieldBody>
                @SelectedLocation?.Name
            </FieldBody>
            <br />
            <FieldBody>
                @SelectedLocation?.Coordinates.Latitude°, @SelectedLocation?.Coordinates.Longitude°, @SelectedLocation?.Coordinates.Elevation m
            </FieldBody>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Secondary" Visible="true">
            <Check TValue="bool" Checked="@Unadjusted" CheckedChanged="@OnUnadjustedChanged">Unadjusted</Check>
            <Check TValue="bool" Checked="@Adjusted" CheckedChanged="@OnAdjustedChanged">Adjusted</Check>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Info" Visible="true">
            <Check TValue="bool" Checked="@Maximums" CheckedChanged="@OnMaximumsChanged">Maximums</Check>
            <Check TValue="bool" Checked="@Minimums" CheckedChanged="@OnMinimumsChanged">Minimums</Check>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Light" Visible="true">
            Start Year <Validation Validator="ValidateYear"><TextEdit Text="@StartYear" MaskType="MaskType.RegEx" EditMask="^[\d]*$" MaxLength="4" TextChanged="OnStartYearTextChanged" /></Validation>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Light" Visible="true">
            End Year <Validation Validator="ValidateYear"><TextEdit Text="@EndYear" MaskType="MaskType.RegEx" EditMask="^[\d]*$" MaxLength="4" TextChanged="OnEndYearTextChanged" /></Validation>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is2">
        <Alert Color="Color.Light" Visible="true">
            Simple Moving Average<br/>
            Interval
            <Select TValue="int" SelectedValue="@SelectedPeriod" SelectedValueChanged="@OnSelectedPeriodChanged">
                <SelectItem Value="0">None</SelectItem>
                <SelectItem Value="3">3 years</SelectItem>
                <SelectItem Value="5">5 years</SelectItem>
                <SelectItem Value="7">7 years</SelectItem>
                <SelectItem Value="10">10 years</SelectItem>
            </Select>
            <Check TValue="bool" Checked="@SoloSma" CheckedChanged="@OnSoloSmaChanged">Solo</Check>
        </Alert>
    </Column>
</Row>

<Map @ref="map" MapOptions="mapOptions"></Map>

<style>
    #mapId {
        height: 25%;
        width: 27%;
        position: absolute;
        top: 10px;
        right: 10px;
    }
</style>

@*<Button Clicked="@(async () => await ButtonClicked())">Redraw</Button>*@
<div style="width: 85%; border: 0.5px dotted; padding: 10px; position: absolute; bottom: 5px;">
    <LineChart @ref="lineChart" TItem="double?" />
</div>

@code{

    int SelectedPeriod;
    async Task OnSelectedPeriodChanged(int value)
    {
        SelectedPeriod = value;
        await HandleRedraw();
    }

    bool SoloSma;
    async Task OnSoloSmaChanged(bool value)
    {
        SoloSma = value;
        await HandleRedraw();
    }

    bool Adjusted = true;
    async Task OnAdjustedChanged(bool value)
    {
        Adjusted = value;
        await HandleRedraw();
    }

    bool Unadjusted;
    async Task OnUnadjustedChanged(bool value)
    {
        Unadjusted = value;
        await HandleRedraw();
    }

    bool Maximums = true;
    async Task OnMaximumsChanged(bool value)
    {
        Maximums = value;
        await HandleRedraw();
    }

    bool Minimums;
    async Task OnMinimumsChanged(bool value)
    {
        Minimums = value;
        await HandleRedraw();
    }

    string StartYear { get; set; }
    string EndYear { get; set; }

    Guid SelectedLocationId { get; set; }
    Location SelectedLocation { get; set; }

    [Inject]
    public IDataService DataService { get; set; }

    public List<DataSet> Datasets { get; set; }
    public IEnumerable<Location> Locations;
    List<Marker> MapMarkers;

    async Task CreateMapMarkers()
    {
        MapMarkers = new List<Marker>();
        foreach (var location in Locations)
        {
            var marker = await MarkerFactory.Create(new LatLng(location.Coordinates.Latitude, location.Coordinates.Longitude, location.Coordinates.Elevation));
            await marker.BindTooltip(location.Name);
            await marker.OnClick(async (MouseEvent mouseEvent) => await HandleMapMouseEvent(mouseEvent));
            await marker.AddTo(map);
            MapMarkers.Add(marker);
        }
    }

    void ValidateYear(ValidatorEventArgs e)
    {
        var year = Convert.ToString(e.Value);

        e.Status = string.IsNullOrEmpty(year) ? ValidationStatus.None :
            year.Length == 4 ? ValidationStatus.Success : ValidationStatus.Error;
    }

    private async Task HandleMapMouseEvent(MouseEvent mouseEvent)
    {
        var lat = Math.Round(mouseEvent.LatLng.Lat, 1);
        var lng = Math.Round(mouseEvent.LatLng.Lng, 1);
        var newLocation = Locations.Single(x => Math.Round(x.Coordinates.Latitude, 1) == lat && Math.Round(x.Coordinates.Longitude, 1) == lng);
        await SelectedLocationChanged(newLocation.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        Locations = (await DataService.GetLocations()).ToList();

        await SelectedLocationChanged(Guid.Parse("e069a5df-8f9e-47d6-a53b-dba5dd4e618c"));

        if (MapMarkers == null)
        {
            await CreateMapMarkers();
        }
    }

    protected async Task RenderLocation()
    {
        var location = Locations.Single(x => x.Id == SelectedLocationId);
        Datasets = new List<DataSet>();
        var adjustedYearlyAverageTemps = (await DataService.GetTemperatures("adjusted", SelectedLocationId)).ToList();
        Datasets.Add(new DataSet { Location = location, Temperatures = adjustedYearlyAverageTemps, Type = DataSetType.Adjusted });

        var unadjustedYearlyAverageTemps = (await DataService.GetTemperatures("unadjusted", SelectedLocationId)).ToList();
        Datasets.Add(new DataSet { Location = location, Temperatures = unadjustedYearlyAverageTemps, Type = DataSetType.Unadjusted });

        await map.SetView(new LatLng(location.Coordinates.Latitude, location.Coordinates.Longitude));

        await HandleRedraw();
    }

    LineChart<double?> lineChart;

    async Task OnStartYearTextChanged(string text)
    {
        StartYear = text;
        if (text.Length == 4)
        {
            await HandleRedraw();
        }
    }

    async Task OnEndYearTextChanged(string text)
    {
        EndYear = text;
        if (text.Length == 4)
        {
            await HandleRedraw();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        if (Datasets == null)
        {
            return;
        }

        var selectedDataSets = new List<DataSet>();

        if (Unadjusted)
        {
            selectedDataSets.AddRange(Datasets.Where(x => x.Type == DataSetType.Unadjusted));
        }
        if (Adjusted)
        {
            selectedDataSets.AddRange(Datasets.Where(x => x.Type == DataSetType.Adjusted));
        }

        var bufferedSelectedDataSet = CreateBufferedDataSet(selectedDataSets);

        var superSetStartYear = bufferedSelectedDataSet.Min(x => x.Temperatures.Min(y => y.Year));
        var superSetEndYear = bufferedSelectedDataSet.Max(x => x.Temperatures.Max(y => y.Year));

        var userStartYear = string.IsNullOrEmpty(StartYear) ? null : (int?)int.Parse(StartYear);
        var userEndYear = string.IsNullOrEmpty(EndYear) ? null : (int?)int.Parse(EndYear);

        var startYear = superSetStartYear;
        var endYear = superSetEndYear;
        if (userStartYear != null)
        {
            if (userStartYear >= superSetStartYear && userStartYear <= superSetEndYear)
            {
                startYear = userStartYear.Value;
            }
        }

        if (userEndYear != null)
        {
            if (userEndYear > superSetStartYear && userEndYear <= superSetEndYear)
            {
                endYear = userEndYear.Value;
            }
        }

        var title = $"Average Temperature (in °C) for {SelectedLocation.Name} ({startYear}-{endYear})";

        await lineChart.Clear();
        object chartOptions = new
        {
            SpanGaps = true,
            Title = new 
            { 
                Text = title,
                Display = true
            },
            Scales = new
            {
                YAxes = new []
                { 
                    new  
                    { 
                        ScaleLabel = new { LabelString = "Degrees Celcius", Display = true } 
                    } 
                },
                XAxes = new []
                { 
                    new 
                    { 
                        ScaleLabel = new { LabelString = "Year", Display = true } 
                    } 
                }       
            }
        };

        await lineChart.SetOptionsObject(chartOptions);

        Func<YearlyAverageTemps, bool> timeConstraint = x => x.Year >= startYear && x.Year <= endYear;

        var numberOfYears = endYear - startYear;
        var labels = new string[numberOfYears + 1];
        for (var i = 0; i <= numberOfYears; i++)
        {
            labels[i] = (startYear + i).ToString();
        }
        Labels = labels;
        await lineChart.AddLabels(Labels);

        if (Unadjusted && Maximums)
        {
            var values = SelectTemperatureValues(bufferedSelectedDataSet, DataSetType.Unadjusted, y => y.Max, timeConstraint);
            var label = "Maximum Unadjusted";
            var colour = ChartColor.FromRgba(127, 191, 95, 1f);
            if (SelectedPeriod == 0 || !SoloSma)
            {
                await lineChart.AddDataSet(GetLineChartDataset(label, values, colour));
            }
            await AddMovingAverage(label, values, colour);
        }
        if (Unadjusted && Minimums)
        {
            var values = SelectTemperatureValues(bufferedSelectedDataSet, DataSetType.Unadjusted, y => y.Min, timeConstraint);
            var label = "Minimum Unadjusted";
            var colour = ChartColor.FromRgba(255, 127, 63, 1f);
            if (SelectedPeriod == 0 || !SoloSma)
            {
                await lineChart.AddDataSet(GetLineChartDataset(label, values, colour));
            }
            await AddMovingAverage(label, values, colour);
        }
        if (Adjusted && Maximums)
        {
            var values = SelectTemperatureValues(bufferedSelectedDataSet, DataSetType.Adjusted, y => y.Max, timeConstraint);
            var label = "Maximum Adjusted";
            var colour = ChartColor.FromRgba(255, 63, 63, 1f);
            if (SelectedPeriod == 0 || !SoloSma)
            {
                await lineChart.AddDataSet(GetLineChartDataset(label, values, colour));
            }
            await AddMovingAverage(label, values, colour);
        }
        if (Adjusted && Minimums)
        {
            var values = SelectTemperatureValues(bufferedSelectedDataSet, DataSetType.Adjusted, y => y.Min, timeConstraint);
            var label = "Minimum Adjusted";
            var colour = ChartColor.FromRgba(63, 63, 255, 1f);
            if (SelectedPeriod == 0 || !SoloSma)
            {
                await lineChart.AddDataSet(GetLineChartDataset(label, values, colour));
            }
            await AddMovingAverage(label, values, colour);
        }
        await lineChart.Update();
    }

    async Task AddMovingAverage(string label, List<double?> values, ChartColor colour)
    {
        if (SelectedPeriod != 0)
        {
            var simpleMovingAverages = SimpleMovingAverage.Calculate(SelectedPeriod, values);
            label = $"{label} Moving Average @ {SelectedPeriod} year interval";
            colour.R = (byte)(colour.R - 64);
            colour.G = (byte)(colour.G + 64);
            colour.B = (byte)(colour.B - 64);
            await lineChart.AddDataSet(GetLineChartDataset(label, simpleMovingAverages, colour));
        }
    }

    List<double?> SelectTemperatureValues(List<DataSet> dataSet, DataSetType dataSetType, Func<YearlyAverageTemps, double?> selector, Func<YearlyAverageTemps, bool> timeConstraint)
    {
        return dataSet.Single(x => x.Type == dataSetType).Temperatures.Where(timeConstraint).Select(selector).ToList();
    }

    List<DataSet> CreateBufferedDataSet(List<DataSet> dataSets)
    {
        var bufferedDataSets = new List<DataSet>();

        var superSetStartYear = dataSets.Min(x => x.Temperatures.Min(y => y.Year));
        foreach(var dataSet in dataSets)
        {
            var bufferedDataSet = new DataSet { Location = dataSet.Location, Type = dataSet.Type };
            bufferedDataSets.Add(bufferedDataSet);

            var startYear = dataSet.Temperatures.Min(x => x.Year);
            var temperatures = new List<YearlyAverageTemps>();
            for (var i = superSetStartYear; i < startYear; i++)
            {
                temperatures.Add(new YearlyAverageTemps { Year = i });
            }
            temperatures.AddRange(dataSet.Temperatures);
            bufferedDataSet.Temperatures = temperatures;
        }

        return bufferedDataSets;
    }

    LineChartDataset<T> GetLineChartDataset<T>(string label, List<T> values, ChartColor chartColor)
    {
        var count = values.Count;
        var colour = new List<string>();
        for (var i = 0; i < count; i++)
            colour.Add(chartColor);

        return new LineChartDataset<T>
                    {
                        Label = label,
                        Data = values,
                        BorderColor = colour,
                        Fill = false,
                        PointRadius = 5,
                        BorderDash = new List<int> { },
                        LineTension = 0.1f,
                    };
    }

    async Task SelectedLocationChanged(Guid newValue)
    {
        SelectedLocationId = newValue;
        SelectedLocation = Locations.Single(x => x.Id == SelectedLocationId);
        base.StateHasChanged();
        await RenderLocation();
    }

    string[] Labels = new string[1];

    private Map map;

    private MapOptions mapOptions = new MapOptions()
    {
        DivId = "mapId",
        Center = new LatLng(-25.6, 134.3),
        Zoom = 5,
        UrlTileLayer = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
	    SubOptions = new MapSubOptions()
        {
            Attribution = "&copy; <a lhref='http://www.openstreetmap.org/copyright'>OpenStreetMap</a>",
            TileSize = 512,
            ZoomOffset = -1,
            MaxZoom = 19,
        }
    };

    [Inject]
    private IMarkerFactory MarkerFactory { get; init; }
    [Inject]
    private IIconFactory IconFactory { get; init; }
}