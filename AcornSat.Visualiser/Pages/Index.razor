@page "/"
@using AcornSat.Core
@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts
@using System.IO;
@using System.Globalization
@using static AcornSat.Core.Enums

<PageTitle>Index</PageTitle>

 @*<h1><a href="http://www.bom.gov.au/climate/data/acorn-sat/" target="_blank">ACORN-SAT</a></h1>*@
<Row>
    <Column ColumnSize="ColumnSize.Is2">
        <SelectList
            TItem="Location"
            TValue="Guid"
            Data="@Locations"
            TextField="@((item)=>item.Name)"
            ValueField="@((item)=>item.Id)"
            SelectedValueChanged="@SelectedLocationChanged"
            DefaultItemText="Select ACORN-SAT Location"
            Style="width: 100%"
            />
        <Alert Color="Color.Primary" Visible="true">
            <FieldBody>
                @SelectedLocation?.Name
            </FieldBody>
            <br />
            <FieldBody>
                @SelectedLocation?.Coordinates.Latitude°, @SelectedLocation?.Coordinates.Longitude°, @SelectedLocation?.Coordinates.Elevation m
            </FieldBody>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Secondary" Visible="true">
            <Check TValue="bool" Checked="@Unadjusted" CheckedChanged="@OnUnadjustedChanged">Unadjusted</Check>
            <Check TValue="bool" Checked="@Adjusted" CheckedChanged="@OnAdjustedChanged">Adjusted</Check>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Info" Visible="true">
            <Check TValue="bool" Checked="@Maximums" CheckedChanged="@OnMaximumsChanged">Maximums</Check>
            <Check TValue="bool" Checked="@Minimums" CheckedChanged="@OnMinimumsChanged">Minimums</Check>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Light" Visible="true">
            Start Year <Validation Validator="ValidateYear"><TextEdit Text="@StartYear" MaskType="MaskType.RegEx" EditMask="^[\d]*$" MaxLength="4" TextChanged="OnStartYearTextChanged" /></Validation>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Light" Visible="true">
            End Year <Validation Validator="ValidateYear"><TextEdit Text="@EndYear" MaskType="MaskType.RegEx" EditMask="^[\d]*$" MaxLength="4" TextChanged="OnEndYearTextChanged" /></Validation>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is2">
        <Alert Color="Color.Light" Visible="true">
            Simple Moving Average<br/>
            Interval
            <Select TValue="int" SelectedValue="@SelectedPeriod" SelectedValueChanged="@OnSelectedPeriodChanged">
                <SelectItem Value="0">None</SelectItem>
                <SelectItem Value="3">3 years</SelectItem>
                <SelectItem Value="5">5 years</SelectItem>
                <SelectItem Value="7">7 years</SelectItem>
                <SelectItem Value="10">10 years</SelectItem>
            </Select>
            <Check TValue="bool" Checked="@SoloSma" CheckedChanged="@OnSoloSmaChanged">Solo</Check>
        </Alert>
    </Column>
</Row>

<Map @ref="map" MapOptions="mapOptions"></Map>

<style>
    #mapId {
        height: 25%;
        width: 27%;
        position: absolute;
        top: 10px;
        right: 10px;
    }
</style>

@*<Button Clicked="@(async () => await ButtonClicked())">Redraw</Button>*@
<div style="width: 85%; border: 0.5px dotted; padding: 10px; position: absolute; bottom: 5px;">
    <LineChart @ref="lineChart" TItem="float?" Clicked="@OnLineChartClicked" />
</div>

@code{

    int SelectedPeriod;
    async Task OnSelectedPeriodChanged(int value)
    {
        SelectedPeriod = value;
        await HandleRedraw();
    }

    bool SoloSma;
    async Task OnSoloSmaChanged(bool value)
    {
        SoloSma = value;
        await HandleRedraw();
    }

    bool Adjusted = true;
    async Task OnAdjustedChanged(bool value)
    {
        Adjusted = value;
        await HandleRedraw();
    }

    bool Unadjusted;
    async Task OnUnadjustedChanged(bool value)
    {
        Unadjusted = value;
        await HandleRedraw();
    }

    bool Maximums = true;
    async Task OnMaximumsChanged(bool value)
    {
        Maximums = value;
        await HandleRedraw();
    }

    bool Minimums;
    async Task OnMinimumsChanged(bool value)
    {
        Minimums = value;
        await HandleRedraw();
    }

    string StartYear { get; set; }
    string EndYear { get; set; }

    short StartYearOfChart { get; set; }

    Guid SelectedLocationId { get; set; }
    Location SelectedLocation { get; set; }

    [Inject]
    public IDataService DataService { get; set; }

    public List<DataSet> Datasets { get; set; }
    public IEnumerable<Location> Locations;
    List<Marker> MapMarkers;

    async Task CreateMapMarkers()
    {
        MapMarkers = new List<Marker>();
        foreach (var location in Locations)
        {
            var marker = await MarkerFactory.Create(new LatLng(location.Coordinates.Latitude, location.Coordinates.Longitude, location.Coordinates.Elevation));
            await marker.BindTooltip(location.Name);
            await marker.OnClick(async (MouseEvent mouseEvent) => await HandleMapMouseEvent(mouseEvent));
            await marker.AddTo(map);
            MapMarkers.Add(marker);
        }
    }

    void ValidateYear(ValidatorEventArgs e)
    {
        var year = Convert.ToString(e.Value);

        e.Status = string.IsNullOrEmpty(year) ? ValidationStatus.None :
            year.Length == 4 ? ValidationStatus.Success : ValidationStatus.Error;
    }

    private async Task HandleMapMouseEvent(MouseEvent mouseEvent)
    {
        var lat = Math.Round(mouseEvent.LatLng.Lat, 1);
        var lng = Math.Round(mouseEvent.LatLng.Lng, 1);
        var newLocation = Locations.Single(x => Math.Round(x.Coordinates.Latitude, 1) == lat && Math.Round(x.Coordinates.Longitude, 1) == lng);
        await SelectedLocationChanged(newLocation.Id);
    }

    protected override async Task OnInitializedAsync()
    {
        DataResolution = DataResolution.Yearly;
        Locations = (await DataService.GetLocations()).ToList();

        await SelectedLocationChanged(Guid.Parse("e069a5df-8f9e-47d6-a53b-dba5dd4e618c"));

        if (MapMarkers == null)
        {
            await CreateMapMarkers();
        }
    }

    protected async Task RenderLocation(DataResolution dataResolution, short? year = null)
    {
        var dataExists = false;
        if (Datasets != null)
        {
            var existingDatasets = Datasets.Where(x => x.Resolution == dataResolution && x.Location.Id == SelectedLocationId);
            dataExists = existingDatasets.Any();
            if (dataExists)
            {
                if (year != null)
                {
                    dataExists = existingDatasets.Any(x => x.Temperatures.All(y => y.Year == year));
                }
            }
        }

        if (!dataExists)
        {
            Datasets = new List<DataSet>();
            var adjustedTemps = (await DataService.GetTemperatures(dataResolution, MeasurementType.Adjusted, SelectedLocationId, year)).ToList();
            Datasets.Add(new DataSet { Resolution = dataResolution, Location = SelectedLocation, Temperatures = adjustedTemps, Type = MeasurementType.Adjusted });

            var unadjustedTemps = (await DataService.GetTemperatures(dataResolution, MeasurementType.Unadjusted, SelectedLocationId, year)).ToList();
            Datasets.Add(new DataSet { Resolution = dataResolution, Location = SelectedLocation, Temperatures = unadjustedTemps, Type = MeasurementType.Unadjusted });
        }

        await map.SetView(new LatLng(SelectedLocation.Coordinates.Latitude, SelectedLocation.Coordinates.Longitude));

        await HandleRedraw();
    }

    LineChart<float?> lineChart;

    async Task OnStartYearTextChanged(string text)
    {
        StartYear = text;
        if (text.Length == 4)
        {
            await HandleRedraw();
        }
    }

    async Task OnEndYearTextChanged(string text)
    {
        EndYear = text;
        if (text.Length == 4)
        {
            await HandleRedraw();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        if (Datasets == null)
        {
            return;
        }

        var labels = new string[0];
        var unadjustedMaximums = new List<float?>();
        var unadjustedMinimums = new List<float?>();
        var adjustedMaximums = new List<float?>();
        var adjustedMinimums = new List<float?>();

        string title = string.Empty;
        var yLabel = "Degrees Celcius";
        var xLabel = "Year";

        await lineChart.Clear();

        List<DataSet> bufferedSelectedDataSet = null;
        Func<TemperatureRecord, bool> timeConstraint = null;

        if (DataResolution == DataResolution.Yearly)
        {
            var selectedDataSets = Datasets.Where(x => x.Resolution == DataResolution.Yearly && ((Adjusted && x.Type == MeasurementType.Adjusted) || (Unadjusted && x.Type == MeasurementType.Unadjusted)))
                                           .ToList();

            bufferedSelectedDataSet = CreateYearlyBufferedDataSet(selectedDataSets);

            var superSetStartYear = bufferedSelectedDataSet.Min(x => x.Temperatures.Min(y => y.Year));
            var superSetEndYear = bufferedSelectedDataSet.Max(x => x.Temperatures.Max(y => y.Year));

            var userStartYear = string.IsNullOrEmpty(StartYear) ? null : (short?)short.Parse(StartYear);
            var userEndYear = string.IsNullOrEmpty(EndYear) ? null : (short?)short.Parse(EndYear);

            var startYear = superSetStartYear;
            var endYear = superSetEndYear;
            if (userStartYear != null)
            {
                if (userStartYear >= superSetStartYear && userStartYear <= superSetEndYear)
                {
                    startYear = userStartYear.Value;
                }
            }

            if (userEndYear != null)
            {
                if (userEndYear > superSetStartYear && userEndYear <= superSetEndYear)
                {
                    endYear = userEndYear.Value;
                }
            }

            title = $"Average Yearly Temperature (in °C) for {SelectedLocation.Name} ({startYear}-{endYear})";

            StartYearOfChart = startYear;

            timeConstraint = x => x.Year >= startYear && x.Year <= endYear;

            var numberOfYears = endYear - startYear;
            labels = new string[numberOfYears + 1];
            for (var i = 0; i <= numberOfYears; i++)
            {
                labels[i] = (startYear + i).ToString();
            }
        }
        else if (DataResolution == DataResolution.Daily)
        {
            var selectedDataSets = Datasets.Where(x => x.Resolution == DataResolution.Daily && x.Temperatures.All(y => y.Year == SelectedYear)).ToList();

            bufferedSelectedDataSet = selectedDataSets;

            title = $"{SelectedYear} Daily Temperature (in °C) for {SelectedLocation.Name}";
            xLabel = "Date";           

            timeConstraint = x => x.Year == SelectedYear;

            var calendar = new GregorianCalendar();
            var numberOfDays = calendar.GetDaysInYear(SelectedYear);
            labels = new string[numberOfDays];
            var date = new DateOnly(SelectedYear, 1, 1);
            for (var i = 0; i < numberOfDays; i++)
            {
                labels[i] = date.ToString();
                date = date.AddDays(1);
            }
        }

        object chartOptions = new
        {
            SpanGaps = true,
            Title = new 
            { 
                Text = title,
                Display = true
            },
            Scales = new
            {
                YAxes = new []
                { 
                    new  
                    { 
                        ScaleLabel = new { LabelString = yLabel, Display = true } 
                    } 
                },
                XAxes = new []
                { 
                    new 
                    { 
                        ScaleLabel = new { LabelString = xLabel, Display = true } 
                    } 
                }       
            }
        };

        await lineChart.SetOptionsObject(chartOptions);

        Labels = labels;
        await lineChart.AddLabels(Labels);

        if (Unadjusted)
        {
            unadjustedMaximums = SelectTemperatureValues(bufferedSelectedDataSet, MeasurementType.Unadjusted, y => y.Max, timeConstraint);
            unadjustedMinimums = SelectTemperatureValues(bufferedSelectedDataSet, MeasurementType.Unadjusted, y => y.Min, timeConstraint);
        }
        if (Adjusted)
        {
            adjustedMaximums = SelectTemperatureValues(bufferedSelectedDataSet, MeasurementType.Adjusted, y => y.Max, timeConstraint);
            adjustedMinimums = SelectTemperatureValues(bufferedSelectedDataSet, MeasurementType.Adjusted, y => y.Min, timeConstraint);
        }

        if (Adjusted && Maximums)
        {
            var values = adjustedMaximums;
            var label = "Maximum Adjusted";
            var colour = ChartColor.FromRgba(255, 63, 63, 1f);
            if (SelectedPeriod == 0 || !SoloSma)
            {
                await lineChart.AddDataSet(GetLineChartDataset(label, values, colour));
            }
            await AddMovingAverage(label, values, colour);
        }
        if (Adjusted && Minimums)
        {
            var values = adjustedMinimums;
            var label = "Minimum Adjusted";
            var colour = ChartColor.FromRgba(63, 63, 255, 1f);
            if (SelectedPeriod == 0 || !SoloSma)
            {
                await lineChart.AddDataSet(GetLineChartDataset(label, values, colour));
            }
            await AddMovingAverage(label, values, colour);
        }
        if (Unadjusted && Maximums)
        {
            var values = unadjustedMaximums;
            var label = "Maximum Unadjusted";
            var colour = ChartColor.FromRgba(127, 191, 95, 1f);
            if (SelectedPeriod == 0 || !SoloSma)
            {
                await lineChart.AddDataSet(GetLineChartDataset(label, values, colour));
            }
            await AddMovingAverage(label, values, colour);
        }
        if (Unadjusted && Minimums)
        {
            var values = unadjustedMinimums;
            var label = "Minimum Unadjusted";
            var colour = ChartColor.FromRgba(255, 127, 63, 1f);
            if (SelectedPeriod == 0 || !SoloSma)
            {
                await lineChart.AddDataSet(GetLineChartDataset(label, values, colour));
            }
            await AddMovingAverage(label, values, colour);
        }

        await lineChart.Update();
    }

    async Task AddMovingAverage(string label, List<float?> values, ChartColor colour)
    {
        if (SelectedPeriod != 0)
        {
            var simpleMovingAverages = SimpleMovingAverage.Calculate(SelectedPeriod, values);
            label = $"{label} Moving Average @ {SelectedPeriod} year interval";
            colour.R = (byte)(colour.R - 64);
            colour.G = (byte)(colour.G + 64);
            colour.B = (byte)(colour.B - 64);
            await lineChart.AddDataSet(GetLineChartDataset(label, simpleMovingAverages, colour));
        }
    }

    List<float?> SelectTemperatureValues(List<DataSet> dataSet, MeasurementType dataSetType, Func<TemperatureRecord, float?> selector, Func<TemperatureRecord, bool> timeConstraint)
    {
        var selectedValues = dataSet.Single(x => x.Type == dataSetType)
                            .Temperatures
                            .Where(timeConstraint)
                            .Select(selector)
                            .ToList();

        return selectedValues;
    }

    List<float?> SelectDailyTemperatureValues(List<DataSet> dataSet, MeasurementType dataSetType, Func<TemperatureRecord, float?> selector)
    {
        var selectedValues = dataSet.Single(x => x.Type == dataSetType)
                            .Temperatures
                            .Select(selector)
                            .ToList();

        return selectedValues;
    }

    List<DataSet> CreateYearlyBufferedDataSet(List<DataSet> dataSets)
    {
        var bufferedDataSets = new List<DataSet>();

        var superSetStartYear = dataSets.Min(x => x.Temperatures.Min(y => y.Year));
        foreach(var dataSet in dataSets)
        {
            var bufferedDataSet = new DataSet { Location = dataSet.Location, Type = dataSet.Type };
            bufferedDataSets.Add(bufferedDataSet);

            var startYear = dataSet.Temperatures.Min(x => x.Year);
            var temperatures = new List<TemperatureRecord>();
            for (var i = superSetStartYear; i < startYear; i++)
            {
                temperatures.Add(new TemperatureRecord { Year = i });
            }
            temperatures.AddRange(dataSet.Temperatures);
            bufferedDataSet.Temperatures = temperatures;
        }

        return bufferedDataSets;
    }

    List<DataSet> CreateDailyBufferedDataSet(List<DataSet> dataSets)
    {
        var bufferedDataSets = new List<DataSet>();

        var startDate = new DateOnly(dataSets.Min(x => x.Temperatures.Min(y => y.Year)), 1, 1);
        foreach(var dataSet in dataSets)
        {
            var bufferedDataSet = new DataSet { Location = dataSet.Location, Type = dataSet.Type };
            bufferedDataSets.Add(bufferedDataSet);

            var startYear = dataSet.Temperatures.Min(x => x.Date);
            var temperatures = new List<TemperatureRecord>();
            //for (var i = superSetStartYear; i < startYear; i++)
            //{
            //    temperatures.Add(new DailyTemperatureRecord { Date = i });
            //}
            temperatures.AddRange(dataSet.Temperatures);
            bufferedDataSet.Temperatures = temperatures;
        }

        return bufferedDataSets;
    }

    LineChartDataset<float?> GetLineChartDataset(string label, List<float?> values, ChartColor chartColor)
    {
        var count = values.Count;
        var colour = new List<string>();
        for (var i = 0; i < count; i++)
            colour.Add(chartColor);

        return new LineChartDataset<float?>
                    {
                        Label = label,
                        Data = values,
                        BorderColor = colour,
                        Fill = false,
                        PointRadius = 5,
                        BorderDash = new List<int> { },
                        LineTension = 0.1f,
                    };
    }

    async Task SelectedLocationChanged(Guid newValue)
    {
        SelectedLocationId = newValue;
        SelectedLocation = Locations.Single(x => x.Id == SelectedLocationId);
        base.StateHasChanged();
        await RenderLocation(DataResolution.Yearly);
    }

    string[] Labels = new string[1];

    private Map map;

    private MapOptions mapOptions = new MapOptions()
    {
        DivId = "mapId",
        Center = new LatLng(-25.6, 134.3),
        Zoom = 5,
        UrlTileLayer = "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
	    SubOptions = new MapSubOptions()
        {
            Attribution = "&copy; <a lhref='http://www.openstreetmap.org/copyright'>OpenStreetMap</a>",
            TileSize = 512,
            ZoomOffset = -1,
            MaxZoom = 19,
        }
    };

    [Inject]
    private IMarkerFactory MarkerFactory { get; init; }
    [Inject]
    private IIconFactory IconFactory { get; init; }

    DataResolution DataResolution { get; set; }

    async Task OnLineChartClicked(ChartMouseEventArgs e)
    {
        var model = e.Model as LineChartModel;

        SelectedYear = (short)(StartYearOfChart + e.Index);
        DataResolution = DataResolution.Daily;
        await RenderLocation(DataResolution.Daily, SelectedYear);
    }

    short SelectedYear { get; set; }
}