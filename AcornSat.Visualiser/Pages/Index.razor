@page "/"
@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts
@using System.IO;


<PageTitle>Index</PageTitle>

<h1><a href="http://www.bom.gov.au/climate/data/acorn-sat/" target="_blank">ACORN-SAT</a></h1>

<SelectList TItem="Location"
            TValue="Guid"
            Data="@Locations"
            TextField="@((item)=>item.Name)"
            ValueField="@((item)=>item.Id)"
            SelectedValueChanged="@SelectedLocationChanged"
            DefaultItemText="Select ACORN-SAT Location"
            Style="width: 300px"
            />

@*<DropdownList TItem="Location" TValue="string"
              Data="@Locations"
              MaxMenuHeight="400"
              TextField="@((item)=>item.Name)"
              ValueField="@((item)=>item.PrimarySite)"
              SelectedValueChanged="@SelectedLocationChanged"
              Color="Color.Primary"
              >
    Select ACORN-SAT Location
</DropdownList>*@

<Row>
    <Column ColumnSize="ColumnSize.Is2">
        <Alert Color="Color.Primary" Visible="true">
            <FieldBody>
                Location: @Locations?.SingleOrDefault(x=> x.Id == @SelectedLocation)?.Name
            </FieldBody>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Secondary" Visible="true">
            <Check TValue="bool" Checked="@Unadjusted" CheckedChanged="@OnUnadjustedChanged">Unadjusted</Check>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Secondary" Visible="true">
            <Check TValue="bool" Checked="@Adjusted" CheckedChanged="@OnAdjustedChanged">Adjusted</Check>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Info" Visible="true">
            <Check TValue="bool" Checked="@Maximums" CheckedChanged="@OnMaximumsChanged">Maximums</Check>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Info" Visible="true">
            <Check TValue="bool" Checked="@Minimums" CheckedChanged="@OnMinimumsChanged">Minimums</Check>
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Light" Visible="true">
            Start Year <TextEdit Text="@StartYear" MaskType="MaskType.RegEx" EditMask="^[\d]*$" MaxLength="4" TextChanged="OnStartYearTextChanged" />
        </Alert>
    </Column>
    <Column ColumnSize="ColumnSize.Is1">
        <Alert Color="Color.Light" Visible="true">
            End Year <TextEdit Text="@EndYear" MaskType="MaskType.RegEx" EditMask="^[\d]*$" MaxLength="4" TextChanged="OnEndYearTextChanged" />
        </Alert>
    </Column>
    
    
</Row>

@*<Button Clicked="@(async () => await HandleRedraw())">Redraw</Button>*@
<div style="width: 95%; border: 1px dashed; padding: 10px;">
    <LineChart @ref="lineChart" TItem="double?" />
</div>

@code{



    bool Adjusted = true;
    async Task OnAdjustedChanged(bool value)
    {
        Adjusted = value;
        await HandleRedraw();
    }

    bool Unadjusted;
    async Task OnUnadjustedChanged(bool value)
    {
        Unadjusted = value;
        await HandleRedraw();
    }

    bool Maximums = true;
    async Task OnMaximumsChanged(bool value)
    {
        Maximums = value;
        await HandleRedraw();
    }

    bool Minimums;
    async Task OnMinimumsChanged(bool value)
    {
        Minimums = value;
        await HandleRedraw();
    }

    string StartYear { get; set; }
    string EndYear { get; set; }

    Guid SelectedLocation { get; set; } = Guid.Parse("e069a5df-8f9e-47d6-a53b-dba5dd4e618c");

    [Inject]
    public ITemperatureDataService TemperatureDataService { get; set; }

    public List<DataSet> Datasets { get; set; }
    public IEnumerable<Location> Locations;

    protected override async Task OnInitializedAsync()
    {
        Locations =  (await TemperatureDataService.GetLocations()).ToList();
        await RenderLocation();
    }

    protected async Task RenderLocation()
    {
        var location = Locations.Single(x => x.Id == SelectedLocation);
        Datasets = new List<DataSet>();
        var adjustedYearlyAverageTemps = (await TemperatureDataService.GetTemperatureData("adjusted", SelectedLocation)).ToList();
        Datasets.Add(new DataSet { Location = location, Temperatures = adjustedYearlyAverageTemps, Type = DataSetType.Adjusted });

        var unadjustedYearlyAverageTemps = (await TemperatureDataService.GetTemperatureData("unadjusted", SelectedLocation)).ToList();
        Datasets.Add(new DataSet { Location = location, Temperatures = unadjustedYearlyAverageTemps, Type = DataSetType.Unadjusted });

        await HandleRedraw();
    }

    LineChart<double?> lineChart;

    async Task OnStartYearTextChanged(string text)
    {
        StartYear = text;
        if (text.Length == 4)
        {
            await HandleRedraw();
        }
    }

    async Task OnEndYearTextChanged(string text)
    {
        EndYear = text;
        if (text.Length == 4)
        {
            await HandleRedraw();
        }
    }

    protected override async Task OnAfterRenderAsync( bool firstRender )
    {
        if ( firstRender )
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        if (Datasets == null)
        {
            return;
        }

        var selectedDataSets = new List<DataSet>();

        if (Unadjusted)
        {
            selectedDataSets.AddRange(Datasets.Where(x => x.Type == DataSetType.Unadjusted));
        }
        if (Adjusted)
        {
            selectedDataSets.AddRange(Datasets.Where(x => x.Type == DataSetType.Adjusted));
        }

        var bufferedSelectedDataSet = BufferedDataSet(selectedDataSets);

        var superSetStartYear = bufferedSelectedDataSet.Min(x => x.Temperatures.Min(y => y.Year));
        var superSetEndYear = bufferedSelectedDataSet.Max(x => x.Temperatures.Max(y => y.Year));

        var userStartYear = string.IsNullOrEmpty(StartYear) ? null : (int?)int.Parse(StartYear);
        var userEndYear = string.IsNullOrEmpty(EndYear) ? null : (int?)int.Parse(EndYear);

        var startYear = superSetStartYear;
        var endYear = superSetEndYear;
        if (userStartYear != null)
        {
            if (userStartYear >= superSetStartYear && userStartYear <= superSetEndYear)
            {
                startYear = userStartYear.Value;
            }
        }

        if (userEndYear != null)
        {
            if (userEndYear > superSetStartYear && userEndYear <= superSetEndYear)
            {
                endYear = userEndYear.Value;
            }
        }

        var location = Locations.Single(x => x.Id == SelectedLocation);
        var title = $"Average Temperature (in °C) for {location.Name} ({startYear}-{endYear})";

        await lineChart.Clear();
        object chartOptions = new
        {
            SpanGaps = true,
            Title = new 
            { 
                Text = title,
                Display = true
            },
            Scales = new
            {
                YAxes = new []
            { 
                new  
                { 
                    ScaleLabel = new { LabelString = "Degrees Celcius", Display = true } 
                } 
            },
                XAxes = new []
            { 
                new 
                { 
                    ScaleLabel = new { LabelString = "Year", Display = true } 
                } 
            }       
            }
        };
        lineChart.SetOptionsObject(null);
        lineChart.SetOptionsObject(chartOptions);

        Func<YearlyAverageTemps, bool> timeConstraint = x => x.Year >= startYear && x.Year <= endYear;

        var numberOfYears = endYear - startYear;
        var labels = new string[numberOfYears + 1];
        for (var i = 0; i <= numberOfYears; i++)
        {
            labels[i] = (startYear + i).ToString();
        }
        Labels = labels;
        await lineChart.AddLabels(Labels);

        if (Unadjusted && Maximums)
        {
            await lineChart.AddDataSet(GetLineChartDataset("Maximum", "Unadjusted", SelectTemperatureValues(bufferedSelectedDataSet, DataSetType.Unadjusted, y => y.Max, timeConstraint), ChartColor.FromRgba( 127, 191, 63, 1f )));
        }
        if (Unadjusted && Minimums)
        {
            await lineChart.AddDataSet(GetLineChartDataset("Minimum", "Unadjusted", SelectTemperatureValues(bufferedSelectedDataSet, DataSetType.Unadjusted, y => y.Min, timeConstraint), ChartColor.FromRgba( 255, 127, 63, 1f )));
        }
        if (Adjusted && Maximums)
        {
            await lineChart.AddDataSet(GetLineChartDataset("Maximum", "Adjusted", SelectTemperatureValues(bufferedSelectedDataSet, DataSetType.Adjusted, y => y.Max, timeConstraint), ChartColor.FromRgba( 255, 63, 63, 1f )));
        }
        if (Adjusted && Minimums)
        {
            await lineChart.AddDataSet(GetLineChartDataset("Minimum", "Adjusted", SelectTemperatureValues(bufferedSelectedDataSet, DataSetType.Adjusted, y => y.Min, timeConstraint), ChartColor.FromRgba( 63, 63, 255, 1f )));
        }

        await lineChart.Update();

    }

    List<double?> SelectTemperatureValues(List<DataSet> dataSet, DataSetType dataSetType, Func<YearlyAverageTemps, double?> selector, Func<YearlyAverageTemps, bool> timeConstraint)
    {
        return dataSet.Single(x => x.Type == dataSetType).Temperatures.Where(timeConstraint).Select(selector).ToList();
    }

    List<DataSet> BufferedDataSet(List<DataSet> dataSets)
    {
        var bufferedDataSets = new List<DataSet>();

        var superSetStartYear = dataSets.Min(x => x.Temperatures.Min(y => y.Year));
        foreach(var dataSet in dataSets)
        {
            var bufferedDataSet = new DataSet { Location = dataSet.Location, Type = dataSet.Type };
            bufferedDataSets.Add(bufferedDataSet);

            var startYear = dataSet.Temperatures.Min(x => x.Year);
            var temperatures = new List<YearlyAverageTemps>();
            for (var i = superSetStartYear; i < startYear; i++)
            {
                temperatures.Add(new YearlyAverageTemps { Year = i });
            }
            temperatures.AddRange(dataSet.Temperatures);
            bufferedDataSet.Temperatures = temperatures;
        }

        return bufferedDataSets;
    }

    LineChartDataset<double?> GetLineChartDataset(string temperatureType, string maxOrMin, List<double?> values, ChartColor chartColor)
    {
        return new LineChartDataset<double?>
                {
                    Label = $"{temperatureType} {maxOrMin}",
                    Data = values,
                    BackgroundColor = new List<string> { chartColor },
                    BorderColor = new List<string> { chartColor },
                    Fill = false,
                    PointRadius = 3,
                    BorderDash = new List<int> { },
                    LineTension = 0.1f,
                };
    }

    async Task SelectedLocationChanged(Guid newValue)
    {
        SelectedLocation = newValue;
        await RenderLocation();
    }

    string[] Labels = new string[1];
}