@page "/fetchdata"
@using Blazorise
@using Blazorise.Charts

<PageTitle>Aggregates</PageTitle>

<h1>Aggregates</h1>


<div style="width: 85%; border: 0.5px dotted; padding: 10px; position: absolute; bottom: 5px;">
    <Chart @ref="chart" TItem="float?" Type="ChartType.Line" />
</div>

@code {
    Chart<float?> chart;

    List<DataSet> AggreagteData { get; set; }

    [Inject]
    public IDataService DataService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AggreagteData = (await DataService.GetAggregateTemperatures(Core.Enums.DataResolution.Yearly, Core.Enums.MeasurementType.Adjusted, -5, -50, dayGroupingThreshold: .6f, locationGroupingThreshold: .5f)).ToList();
        await HandleRedraw();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {       
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        if (AggreagteData == null)
        {
            return;
        }

        var dataSet = AggreagteData.Single();

        object chartOptions = new
        {
            SpanGaps = true,
            Title = new 
            { 
                Text = $"Yearly Average",// for {string.Join(", ", dataSet.Locations.Select(x => x.Name))}",
                Display = true
            },
            Scales = new
            {
                YAxes = new []
                { 
                    new  
                    { 
                        ScaleLabel = new { LabelString = "Degrees Celsius (°C)", Display = true } 
                    } 
                },
                XAxes = new []
                { 
                    new 
                    { 
                        ScaleLabel = new { LabelString = "Year", Display = true } 
                    } 
                }       
            }
        };

        
        var labels = dataSet.Years.Select(x => x.ToString()).ToArray();
        

        var values = dataSet.Temperatures.Select(x => x.Max).ToList();

        await chart.Clear();
        await chart.SetOptionsObject(chartOptions);
        await chart.AddLabels(labels);
        

        var lineChartDataSet = GetLineChartDataset($"Adjusted values", values, ChartColor.FromHtmlColorCode(colours.GetNextColour()));
        await chart.AddDataSet(lineChartDataSet);

        await chart.Update();
    }
    
    ColourServer colours = new ColourServer();

    LineChartDataset<float?> GetLineChartDataset(string label, List<float?> values, ChartColor chartColor)
    {
        var count = values.Count;
        var colour = new List<string>();
        for (var i = 0; i < count; i++)
            colour.Add(chartColor);

        return new LineChartDataset<float?>
                    {
                        Label = label,
                        Data = values,
                        BorderColor = colour,
                        Fill = false,
                        PointRadius = 5,
                        BorderDash = new List<int> { },
                        LineTension = 0.1f,
                    };
    }

}
