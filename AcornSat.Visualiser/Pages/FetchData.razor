@page "/fetchdata"
@using Blazorise
@using Blazorise.Charts
@using static AcornSat.Core.Enums

<PageTitle>Climate explorer - Aggregates</PageTitle>

<h1>Aggregates</h1>

<div style="padding: 10px; position: relative;">
    <Chart @ref="chart" TItem="float?" Type="ChartType.Line" />
</div>

@code {
    Chart<float?> chart;

    List<DataSet> AggregateData { get; set; }

    [Inject]
    public IDataService DataService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AggregateData = 
            (
                await DataService.GetAggregateDataSet(
                    DataType.TempMax, 
                    DataResolution.Yearly, 
                    Core.Enums.DataAdjustment.Adjusted, 
                    -5, 
                    -50, 
                    dayGroupingThreshold: .5f, 
                    locationGroupingThreshold: .5f)
            )
            .ToList();

        await HandleRedraw();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {       
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        if (AggregateData == null)
        {
            return;
        }

        var dataSet = AggregateData.Single();

        object chartOptions = new
        {
            SpanGaps = true,
            Title = new 
            { 
                Text = $"Yearly Average for {dataSet.Locations.Count} locations.",
                Display = true
            },
            Scales = new
            {
                YAxes = new []
                { 
                    new  
                    { 
                        ScaleLabel = new { LabelString = "Degrees Celsius (°C)", Display = true } 
                    } 
                },
                XAxes = new []
                { 
                    new 
                    { 
                        ScaleLabel = new { LabelString = "Year", Display = true } 
                    } 
                }       
            }
        };
                
        var labels = dataSet.Years.Select(x => x.ToString()).ToArray();        

        var values = dataSet.DataRecords.Select(x => x.Value).ToList();

        await chart.Clear();
        await chart.SetOptionsObject(chartOptions);
        await chart.AddLabels(labels);
        
        var lineChartDataSet = GetLineChartDataset($"Adjusted values", values, ChartColor.FromHtmlColorCode(colours.GetNextColour()));
        await chart.AddDataSet(lineChartDataSet);

        await chart.Update();
    }
    
    ColourServer colours = new ColourServer();

    LineChartDataset<float?> GetLineChartDataset(string label, List<float?> values, ChartColor chartColor)
    {
        var count = values.Count;
        var colour = new List<string>();
        for (var i = 0; i < count; i++)
            colour.Add(chartColor);

        return 
            new LineChartDataset<float?>
            {
                Label = label,
                Data = values,
                BorderColor = colour,
                Fill = false,
                PointRadius = 5,
                BorderDash = new List<int> { },
                Tension = 0.1f,
            };
    }

}
