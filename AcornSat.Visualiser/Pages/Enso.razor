@page "/enso"
@using AcornSat.Core
@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts
@using static AcornSat.Core.Enums

<PageTitle>ENSO</PageTitle>

<h1>ENSO</h1>

<Row>
    <Column ColumnSize="ColumnSize.Is3">
        Index
        <Select TValue="EnsoIndex" SelectedValue="@SelectedIndex" SelectedValueChanged="@OnSelectedIndexChanged">
            <SelectItem Value="@EnsoIndex.Mei">Multivariate ENSO index (MEI.v2)</SelectItem>
            <SelectItem Value="@EnsoIndex.Nino34">Niño 3.4</SelectItem>
            <SelectItem Value="@EnsoIndex.Oni">Oceanic Niño Index (ONI)</SelectItem>
            <SelectItem Value="@EnsoIndex.Soi">Southern Oscillation Index (SOI)</SelectItem>
        </Select>
   </Column>
   <Column ColumnSize="ColumnSize.Is2">
        Resolution
        <Select TValue="DataResolution" SelectedValue="@SelectedResolution" SelectedValueChanged="@OnSelectedResolutionChanged">
            <SelectItem Value="@DataResolution.Yearly">Yearly</SelectItem>
            <SelectItem Value="@DataResolution.Monthly">Monthly</SelectItem>
        </Select>
   </Column>
@*   <Column ColumnSize="ColumnSize.Is2">
        Chart Type
        <Select TValue="ChartType" SelectedValue="@SelectedChartType" SelectedValueChanged="@OnSelectedChartTypeChanged">
            <SelectItem Value="@ChartType.Bar">Bar</SelectItem>
            <SelectItem Value="@ChartType.Line">Line</SelectItem>
        </Select>
   </Column>*@
   @if (SelectedResolution == DataResolution.Yearly)
    {
       <Column ColumnSize="ColumnSize.Is2">
        Measure
        <Select TValue = "string" SelectedValue = "@SelectedMeasure" SelectedValueChanged = "@OnSelectedMeasureChanged">
                 <SelectItem Value = "@("mean")">Mean</SelectItem>
                 <SelectItem Value = "@("median")">Median</SelectItem>
                 <SelectItem Value = "@("mode")" >Mode</SelectItem>
        </Select>
        </Column>
    }
</Row>

<div style="width: 85%; border: 0.5px dotted; padding: 10px; position: absolute; bottom: 5px;">
    <Chart @ref="chart" TItem="float?" Type="@SelectedChartType" />
</div>

@code {

    ChartType SelectedChartType = ChartType.Bar;
    async Task OnSelectedChartTypeChanged(ChartType value)
    {
        SelectedChartType = value;
        await HandleRedraw();
    }

    DataResolution SelectedResolution;
    async Task OnSelectedResolutionChanged(DataResolution value)
    {
        SelectedResolution = value;
        EnsoData = (await DataService.GetEnso(SelectedIndex, SelectedResolution, SelectedMeasure)).ToList();
        await HandleRedraw();
    }

    EnsoIndex SelectedIndex;
    async Task OnSelectedIndexChanged(EnsoIndex value)
    {
        SelectedIndex = value;
        EnsoData = (await DataService.GetEnso(SelectedIndex, SelectedResolution, SelectedMeasure)).ToList();
        await HandleRedraw();
    }

    string SelectedMeasure;
    async Task OnSelectedMeasureChanged(string value)
    {
        SelectedMeasure = value;
        EnsoData = (await DataService.GetEnso(SelectedIndex, SelectedResolution, SelectedMeasure)).ToList();
        await HandleRedraw();
    }

    Chart<float?> chart;

    [Inject]
    public IDataService DataService { get; set; }

    List<ReferenceData> EnsoData { get; set; }

    List<EnsoMetaData> EnsoMetaData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EnsoMetaData = (await DataService.GetEnsoMetaData()).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {       
        if (firstRender)
        {
            OnSelectedMeasureChanged("mean");
        }
    }

    async Task HandleRedraw()
    {
        if (EnsoData == null)
        {
            return;
        }

        var enso = EnsoMetaData.Single(x => x.Index == SelectedIndex);

        object chartOptions = new
        {
            SpanGaps = true,
            Title = new 
            { 
                Text = $"ENSO {enso.Name} {(SelectedResolution == DataResolution.Yearly ? "Yearly Average" : "Monthly")}",
                Display = true
            },
            Scales = new
            {
                YAxes = new []
                { 
                    new  
                    { 
                        ScaleLabel = new { LabelString = "Index values", Display = true } 
                    } 
                },
                XAxes = new []
                { 
                    new 
                    { 
                        ScaleLabel = new { LabelString = (SelectedResolution == DataResolution.Yearly ? "Year" : "Month/Year"), Display = true } 
                    } 
                }       
            }
        };

        string[] labels = null;
        if (SelectedResolution == DataResolution.Yearly)
        {
            labels = EnsoData.Select(x => x.Year.ToString()).ToArray();
        }
        else
        {
            labels = EnsoData.Select(x => $"{x.Month}/{x.Year}").ToArray();
        }

        var values = EnsoData.Select(x => x.Value).ToList();

        await chart.Clear();
        await chart.SetOptionsObject(chartOptions);
        await chart.AddLabels(labels);
        if (SelectedChartType == ChartType.Bar)
        {

            var dataSet = GetBarChartDataset($"{enso.ShortName} {SelectedMeasure} values", values);
            await chart.AddDataSet(dataSet);
        }
        else
        {
            var dataSet = GetLineChartDataset($"{enso.ShortName} {SelectedMeasure} values", values);
            await chart.AddDataSet(dataSet);
        }
        await chart.Update();
    }

    public static List<string> GetBarChartColourSet(List<float?> values, bool redPositive = true)
    {
        var count = values.Count;

        var min = (redPositive ? values.Min() : values.Max()).Value;
        var max = (redPositive ? values.Max() : values.Min()).Value;

        var colour = new List<string>();
        for (var i = 0; i < count; i++)
        {
            ChartColor chartColor;
            if (values[i].HasValue)
            {
                var adjustedValue = values[i].Value * (redPositive ? 1f : -1f);
                if (adjustedValue > 0)
                {
                    chartColor = ChartColor.FromRgba((byte)((Math.Abs(adjustedValue / max)) * 255), 31, 31, 1f);
                }
                else
                {
                    chartColor = ChartColor.FromRgba(31, 31, (byte)((Math.Abs(adjustedValue / min)) * 255), 1f);
                }
                colour.Add(chartColor);
            }
            else
            {
                colour.Add(null);
            }
        }

        return colour;
    }

    BarChartDataset<float?> GetBarChartDataset(string label, List<float?> values)
    {
        var enso = EnsoMetaData.Single(x => x.Index == SelectedIndex);

        var colour = GetBarChartColourSet(values, enso.ElNinoOrientation > 0);

        return new BarChartDataset<float?>
                    {
                        Label = label,
                        Data = values,
                        BorderColor = colour,
                        BackgroundColor = colour,
                    };
    }

    LineChartDataset<float?> GetLineChartDataset(string label, List<float?> values)
    {
        var colour = GetBarChartColourSet(values);

        return new LineChartDataset<float?>
                    {
                        Label = label,
                        Data = values,
                        //BorderColor = colour,
                        BackgroundColor = colour,
                        //PointBackgroundColor = colour,
                        Fill = true,
                        PointRadius = 2,
                        BorderDash = new List<int> { },
                        LineTension = 0.1f,
                    };
    }
}
