@using ClimateExplorer.Core
@using ClimateExplorer.Core.Calculators;
@using ClimateExplorer.Core.DataPreparation;
@using ClimateExplorer.Core.ViewModel
@using static ClimateExplorer.Core.Enums;
@using ClimateExplorer.Visualiser.UiModel

<OverviewField Label="Warming index" PopupText="@WarmingIndexDescription"><Value>@(WarmingIndexAsString == null ? "NA" : WarmingIndexAsString)</Value></OverviewField>
<!--
-->
<OverviewField Label="Heating score" PopupText="@HeatingScoreDescription"><Value>@(Location == null ? "NA" : Location.HeatingScore)</Value></OverviewField>
<ClimateStripe UnitOfMeasure="UnitOfMeasure.DegreesCelsius" LocationName=@Location?.Name LocationMean=@LocationMean DataRecords="@MaxTempAnomalyRecords" OnYearFilterChange=HandleOnYearFilterChange ShowInfo="true" />
<WarmestYears DataRecords="@MaxTempAnomalyRecords" OnYearFilterChange=HandleOnYearFilterChange />

@code {
    [Inject]
    public IDataService DataService { get; set; }

    [Parameter]
    public Location? Location { get; set; }

    [Parameter]
    public IEnumerable<DataSetDefinitionViewModel> DataSetDefinitions { get; set; }

    [Parameter]
    public EventCallback<YearAndDataTypeFilter> OnYearFilterChange { get; set; }

    [Parameter]
    public DataContexts DataContext { get; set; }

    /// <summary>
    /// Used by the warming stripe
    /// </summary>
    List<YearAndValue>? MaxTempAnomalyRecords { get; set; }

    const string HeatingScoreDescription = @"<p>The heating score is a number between 0 and 9. It is derived from comparing all warming indexes across the locations in the dataset. The highest warming index in the dataset is used to standardise the values.</p>
<p>To calculate the heating score:</p>
<ul>
<li>For warming indexes that are greater than zero, divide the warming index by the maximum warming index in the set, multiple by 9 and round to zero decimal places.</li>
<li>For warming indexes that are less than zero, simply round to zero decimal places. N.b., negative heating scores are therefore not relative scores.</li>
</ul>
<p>The score may be higher if:</p>
<ul><li>The location is inland. The ocean is warming more slowly compared with the land. Coastal locations are therefore likely to have warmed less than inland locations.</li>
<li>The station(s) has been operating for a long time. The effect of global warming is more obvious with a large dataset as temperatures in the past were cooler.</li>";

    float? LocationMean { get; set; }

    string? WarmingIndexDescription;
    string? WarmingIndexAsString;

    public bool LocationLoadingIndicatorVisible { get; set; }
    Guid? locationIdLastTimeOnParametersSetAsyncWasCalled;

    protected override async Task OnParametersSetAsync()
    {
        if (Location == null)
        {
            return;
        }

        // We do manual change detection here because Blazor calls OnParametersSetAsync() repeatedly with the same input values.
        if (locationIdLastTimeOnParametersSetAsyncWasCalled == Location?.Id)
        {
            return;
        }
        LocationLoadingIndicatorVisible = true;
        locationIdLastTimeOnParametersSetAsyncWasCalled = Location?.Id;

        // Clear the previous values so we don't accidentally end-up reporting them
        LocationMean = null;
        MaxTempAnomalyRecords = null;
        WarmingIndexDescription = null;
        WarmingIndexAsString = null;

        // We can't do anything until we're supplied our tasty, tasty DataSetDefinitions
        if (DataSetDefinitions == null)
        {
            return;
        }

        var tempMaxMeasurementForLocation =
            DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(
                DataSetDefinitions,
                Location.Id,
                DataType.TempMax,
                Enums.DataAdjustment.Adjusted,
                true);

        if (tempMaxMeasurementForLocation != null)
        {
            // Retrieve TempMax anomaly
            var series =
                await DataService.PostDataSet(
                    BinGranularities.ByYear,
                    ContainerAggregationFunctions.Mean,
                    ContainerAggregationFunctions.Mean,
                    ContainerAggregationFunctions.Mean,
                    SeriesValueOptions.Anomaly,
                    new SeriesSpecification[]
                        {
                            new SeriesSpecification
                            {
                                DataAdjustment = tempMaxMeasurementForLocation.MeasurementDefinition.DataAdjustment,
                                DataSetDefinitionId = tempMaxMeasurementForLocation.DataSetDefinition.Id,
                                DataType = tempMaxMeasurementForLocation.MeasurementDefinition.DataType,
                                LocationId = Location.Id
                            }
                        },
                    SeriesDerivationTypes.ReturnSingleSeries,
                    1.0f,
                    1.0f,
                    0.7f,
                    14,
                    SeriesTransformations.Identity);

            // Filter to records that have values
            MaxTempAnomalyRecords =
                series.DataRecords
                .Where(x => x.Value != null)
                .Select(x => new YearAndValue(((YearBinIdentifier)BinIdentifier.Parse(x.BinId)).Year, x.Value.Value))
                .ToList();

            // Retrieve TempMax absolute
            series =
                await DataService.PostDataSet(
                    BinGranularities.ByYear,
                    ContainerAggregationFunctions.Mean,
                    ContainerAggregationFunctions.Mean,
                    ContainerAggregationFunctions.Mean,
                    SeriesValueOptions.Value,
                    new SeriesSpecification[]
                        {
                            new SeriesSpecification
                            {
                                DataAdjustment = tempMaxMeasurementForLocation.MeasurementDefinition.DataAdjustment,
                                DataSetDefinitionId = tempMaxMeasurementForLocation.DataSetDefinition.Id,
                                DataType = tempMaxMeasurementForLocation.MeasurementDefinition.DataType,
                                LocationId = Location.Id
                            }
                        },
                    SeriesDerivationTypes.ReturnSingleSeries,
                    1.0f,
                    1.0f,
                    0.7f,
                    14,
                    SeriesTransformations.Identity);

            var warmingIndex = IndexCalculator.CalculateIndex(series.DataRecords);

            WarmingIndexDescription = GenerateWarmingIndexDescription(warmingIndex, tempMaxMeasurementForLocation.MeasurementDefinition.UnitOfMeasure);
            WarmingIndexAsString = GetWarmingIndexAsString(warmingIndex, tempMaxMeasurementForLocation.MeasurementDefinition.UnitOfMeasure);

            LocationMean = series.DataRecords.Average(x => x.Value);
        }

        LocationLoadingIndicatorVisible = false;
    }

    public async Task HandleOnYearFilterChange(short year)
    {
        var yearAndFilter = new YearAndDataTypeFilter(year) { DataAdjustment = DataAdjustment.Adjusted, DataType = DataType.TempMax };
        await OnYearFilterChange.InvokeAsync(yearAndFilter);
    }

    static string GetWarmingIndexAsString(CalculatedIndex warmingIndex, UnitOfMeasure unitOfMeasure)
    {
        if (warmingIndex == null) return "NA";

        return $"{(warmingIndex.IndexValue >= 0 ? "+" : "")}{string.Format("{0:0.#}", MathF.Round(warmingIndex.IndexValue, 1))}{(unitOfMeasure == UnitOfMeasure.DegreesCelsius ? "°C" : "mm")}";
    }

    string GenerateWarmingIndexDescription(CalculatedIndex warmingIndex, UnitOfMeasure unitOfMeasure)
    {
        if (Location == null)
        {
            return "NA";
        }

        string warmingIndexAsString = GetWarmingIndexAsString(warmingIndex, unitOfMeasure);

        if (warmingIndex == null)
        {
            return $@"<p>The warming index is the temperature difference between the average of the last 30 years of maximum temperatures compared with the average of the first half of the dataset. 30 years was chosen to fit the convention of the <a href=""https://en.wikipedia.org/wiki/Climatological_normal"" target=""_blank"">climatological normal</a>. The first half of the datatset is used as a proxy for a natural baseline; it is expected to be less affected by anthropogenic warming.</p>
<p>Over the long-term, with no external influences, we'd expect the warming index to trend towards zero. A non-zero warming index may indicate an effect of climate change. A positive warming index may indicate global warming.</p>";
        }

        return
            String.Join(
                Environment.NewLine,
                $"<p>The warming index is the temperature difference between the average of the last 30 years of maximum temperatures compared with the average of the first half ({warmingIndex.CountOfFirstHalf} years) of the dataset. 30 years was chosen to fit the convention of the <a href=\"https://en.wikipedia.org/wiki/Climatological_normal\" target=\"_blank\">climatological normal</a>. The first half of the datatset is used as a proxy for a natural baseline; it is expected to be less affected by anthropogenic warming.</p>",
                $"<p>{Location.Name}, between the years {warmingIndex.FirstYearInLast30Years}-{warmingIndex.LastYearInLast30Years}, had an average max temp of <strong>{string.Format("{0:0.##}", MathF.Round(warmingIndex.AverageOfLastTwentyYears, 2))}°C</strong>.</p>",
                $"<p>{Location.Name}, between the years {warmingIndex.FirstYearInFirstHalf}-{warmingIndex.LastYearInFirstHalf}, had an average max temp of <strong>{string.Format("{0:0.##}", MathF.Round(warmingIndex.AverageOfFirstHalf, 2))}°C</strong>.</p>",
                $"<p>The difference is <strong>{warmingIndexAsString}</strong> (after rounding to 1 decimal place).</p>",
                $"<p>Over the long-term, with no external influences, we'd expect the warming index to trend towards zero. A non-zero warming index may indicate an effect of climate change. A positive warming index may indicate global warming.</p>"
            );
    }
}
