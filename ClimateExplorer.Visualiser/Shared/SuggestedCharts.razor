@using Blazorise.SpinKit
@using ClimateExplorer.Core.ViewModel
@using ClimateExplorer.Visualiser.UiModel
@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts
@using ClimateExplorer.Core.DataPreparation
@using static ClimateExplorer.Visualiser.UiModel.SuggestedPresetLists;
@using static ClimateExplorer.Core.Enums

@if (DataSetDefinitions == null || (PresetType == PresetTypes.Location && SelectedLocation == null))
{
    <SpinKit Type="SpinKitType.Plane" />
}
else
{
    <div class="suggested-data-set-list">
        @foreach (var s in SuggestedPresets)
        {
            @if (s.MenuExpanded)
            {
                <div class="modal-underlay" @onclick="() => s.MenuExpanded = false"></div>
            }

            <div class="@CalculateClassForSuggestedDataSetElement(s)">
                <div class="main" @onclick="() => OnChartPresetSelected.InvokeAsync(s.ChartSeriesList)">
                    <div class="title">@s.Title</div>
                    <div class="description">@s.Description</div>
                    @if (s.MissingChartSeries)
                    {
                        <div class="missing-chart-series"><i class="fas fa-info-circle"></i> Some data not available here</div>
                    }
                </div>

                @if (s.Variants != null && s.Variants.Count > 0)
                {
                    <div class="expander" @onclick="() => s.MenuExpanded = !s.MenuExpanded">
                        <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
                    </div>
                }

                @if (s.MenuExpanded)
                {
                    <div class="menu">
                        @if (s.Variants != null)
                        {
                            foreach (var v in s.Variants)
                            {
                                <div class="main" @onclick="() => OnChartPresetSelected.InvokeAsync(v.ChartSeriesList)">
                                    <div class="title">@v.Title</div>
                                    <div class="description">@v.Description</div>
                                    @if (v.MissingChartSeries)
                                    {
                                        <div class="missing-chart-series"><i class="fas fa-info-circle"></i> Some data not available here</div>
                                    }
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public IEnumerable<DataSetDefinitionViewModel> DataSetDefinitions { get; set; }

    [Parameter]
    public Location SelectedLocation { get; set; }

    [Parameter]
    public EventCallback<List<ChartSeriesDefinition>> OnChartPresetSelected { get; set; }

    [Parameter]
    public bool ExpandUpwards { get; set; }

    [Parameter]
    public PresetTypes PresetType { get; set; }

    List<SuggestedChartPresetModelWithVariants> SuggestedPresets { get; set; }

    string CalculateClassForSuggestedDataSetElement(SuggestedChartPresetModel s)
    {
        string c = "suggested-data-set";

        if (s.MenuExpanded) c += " menu-expanded";

        if (ExpandUpwards) c += " expand-upwards";

        return c;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (DataSetDefinitions == null)
        {
            return;
        }

        switch (PresetType)
        {
            case PresetTypes.Location:
                SuggestedPresets = SuggestedPresetLists.LocationBasedPresets(DataSetDefinitions, SelectedLocation);
                break;
            case PresetTypes.RegionalAndGlobal:
                SuggestedPresets = SuggestedPresetLists.RegionalAndGlobalPresets(DataSetDefinitions);
                break;
        }

        // Presets may call for data that is not available at all locations. In those
        // cases, remove the ChartSeries entries that aren't available & set a flag
        // on the preset so that an indicator can be shown to the user.
        foreach (var p in SuggestedPresets.Where(x => x.ChartSeriesList != null))
        {
            p.MissingChartSeries = false;

            foreach (var csd in p.ChartSeriesList.ToArray())
            {
                if (!csd.SourceSeriesSpecifications.Any() || csd.SourceSeriesSpecifications.Any(x => x.MeasurementDefinition == null))
                {
                    p.ChartSeriesList.Remove(csd);

                    p.MissingChartSeries = true;
                }
            }

            if (p.Variants != null)
            {
                foreach (var v in p.Variants)
                {
                    v.MissingChartSeries = false;

                    foreach (var csd in v.ChartSeriesList.ToArray())
                    {
                        if (!csd.SourceSeriesSpecifications.Any() || csd.SourceSeriesSpecifications.Any(x => x.MeasurementDefinition == null))
                        {
                            v.ChartSeriesList.Remove(csd);

                            v.MissingChartSeries = true;
                        }
                    }
                }
            }
        }
    }
}