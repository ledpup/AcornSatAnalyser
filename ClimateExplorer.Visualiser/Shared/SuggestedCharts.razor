@using ClimateExplorer.Core.ViewModel
@using ClimateExplorer.Visualiser.UiModel
@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts
@using ClimateExplorer.Core.DataPreparation
@using static ClimateExplorer.Core.Enums

<div class="suggested-data-set-list">
    @foreach (var s in SuggestedPresets)
    {
        @if (s.MenuExpanded)
        {
            <div class="modal-underlay" @onclick="() => s.MenuExpanded = false"></div>
        }

        <div class="@CalculateClassForSuggestedDataSetElement(s)">
            <div class="main" @onclick="() => OnChartPresetSelected.InvokeAsync(s.ChartSeriesList)">
                <div class="title">@s.Title</div>
                <div class="description">@s.Description</div>
                @if (s.MissingChartSeries)
                {
                    <div class="missing-chart-series"><i class="fas fa-info-circle"></i> Some data not available here</div>
                }
            </div>

            @if (s.Variants != null && s.Variants.Count > 0)
            {
                <div class="expander" @onclick="() => s.MenuExpanded = !s.MenuExpanded">
                    <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
                </div>
            }

            @if (s.MenuExpanded)
            {
                <div class="menu">
                    @if (s.Variants != null)
                    {
                        foreach (var v in s.Variants)
                        {
                            <div class="main" @onclick="() => OnChartPresetSelected.InvokeAsync(v.ChartSeriesList)">
                                <div class="title">@v.Title</div>
                                <div class="description">@v.Description</div>
                                @if (v.MissingChartSeries)
                                {
                                    <div class="missing-chart-series"><i class="fas fa-info-circle"></i> Some data not available here</div>
                                }
                            </div>
                        }
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public IEnumerable<DataSetDefinitionViewModel> DataSetDefinitions { get; set; }

    [Parameter]
    public Location SelectedLocation { get; set; }

    [Parameter]
    public EventCallback<List<ChartSeriesDefinition>> OnChartPresetSelected { get; set; }

    [Parameter]
    public bool ExpandUpwards { get; set; }

    List<SuggestedChartPresetModelWithVariants> SuggestedPresets { get; set; }

    string CalculateClassForSuggestedDataSetElement(SuggestedChartPresetModel s)
    {
        string c = "suggested-data-set";

        if (s.MenuExpanded) c += " menu-expanded";

        if (ExpandUpwards) c += " expand-upwards";

        return c;
    }

    protected override async Task OnParametersSetAsync()
    {
        SuggestedPresets = new List<SuggestedChartPresetModelWithVariants>();

        if (SelectedLocation == null) return;

        var tempMax                        = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, SelectedLocation.Id, DataType.TempMax,        DataAdjustment.Adjusted,   true,  throwIfNoMatch: false);
        var tempMaxUnadjusted              = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, SelectedLocation.Id, DataType.TempMax,        DataAdjustment.Unadjusted, false, throwIfNoMatch: false);
        var tempMaxUnadjustedOrUnspecified = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, SelectedLocation.Id, DataType.TempMax,        DataAdjustment.Unadjusted, true,  throwIfNoMatch: false);
        var rainfall                       = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, SelectedLocation.Id, DataType.Rainfall,       null,                             throwIfNoMatch: false);
        var solarRadiation                 = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, SelectedLocation.Id, DataType.SolarRadiation, null,                             throwIfNoMatch: false);
        var tempMin                        = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, SelectedLocation.Id, DataType.TempMin,        DataAdjustment.Adjusted,   true,  throwIfNoMatch: false);
        var tempMinUnadjusted              = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, SelectedLocation.Id, DataType.TempMin,        DataAdjustment.Unadjusted, false, throwIfNoMatch: false);

        var nino34 = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, null, DataType.Nino34, null, false, throwIfNoMatch: true);

        var c2o = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, null, DataType.CO2, null, false, throwIfNoMatch: true);
        var ch4 = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, null, DataType.CH4, null, false, throwIfNoMatch: true);
        var n2o = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, null, DataType.N2O, null, false, throwIfNoMatch: true);

        var northSeaIceExtent = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, null, DataType.NorthSeaIce, null, false, throwIfNoMatch: true);
        var southSeaIceExtent = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, null, DataType.SouthSeaIce, null, false, throwIfNoMatch: true);
        var greenland = DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(DataSetDefinitions, null, DataType.GreenlandIceMelt, null, false, throwIfNoMatch: true);

        SuggestedPresets.Add(
            new SuggestedChartPresetModelWithVariants()
            {
                Title = "Temperature + rainfall",
                Description = "Smoothed maximum daily temperature and rainfall",
                ChartSeriesList =
                new List<ChartSeriesDefinition>()
                {
                    new ChartSeriesDefinition()
                    {
                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMax),
                        Aggregation = SeriesAggregationOptions.Mean,
                        BinGranularity = BinGranularities.ByYear,
                        Smoothing = SeriesSmoothingOptions.MovingAverage,
                        SmoothingWindow = 20,
                        Value = SeriesValueOptions.Value,
                        Year = null
                    },
                    new ChartSeriesDefinition()
                    {
                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, rainfall),
                        Aggregation = SeriesAggregationOptions.Sum,
                        BinGranularity = BinGranularities.ByYear,
                        Smoothing = SeriesSmoothingOptions.MovingAverage,
                        SmoothingWindow = 20,
                        Value = SeriesValueOptions.Value,
                        Year = null
                    }
                },
                Variants = new List<SuggestedChartPresetModel> {
                    new SuggestedChartPresetModelWithVariants()
                    {
                        Title = "ENSO + rainfall",
                        Description = "Monthly chart of the Nino 3.4 index and rainfall",
                        ChartSeriesList =
                        new List<ChartSeriesDefinition>()
                        {
                            new ChartSeriesDefinition()
                            {
                                SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, rainfall),
                                Aggregation = SeriesAggregationOptions.Sum,
                                BinGranularity = BinGranularities.ByYearAndMonth,
                                Smoothing = SeriesSmoothingOptions.MovingAverage,
                                SmoothingWindow = 3,
                                Value = SeriesValueOptions.Value,
                                Year = null,
                                DisplayStyle = SeriesDisplayStyle.Line,
                                SeriesTransformation = SeriesTransformations.Identity,
                                RequestedColour = UiLogic.Colours.Green,
                            },
                            new ChartSeriesDefinition()
                            {
                                SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(null, nino34),
                                Aggregation = SeriesAggregationOptions.Mean,
                                BinGranularity = BinGranularities.ByYearAndMonth,
                                Smoothing = SeriesSmoothingOptions.None,
                                SmoothingWindow = 5,
                                Value = SeriesValueOptions.Value,
                                Year = null,
                                DisplayStyle = SeriesDisplayStyle.Bar,
                                SeriesTransformation = SeriesTransformations.Identity,
                            },
                        },
                    }
                }
            }
        );

        SuggestedPresets.Add(
            new SuggestedChartPresetModelWithVariants()
            {
                Title = "Temperature",
                Description = "Yearly view of average maximum daily temperature",
                ChartSeriesList =
                    new List<ChartSeriesDefinition>()
                    {
                        new ChartSeriesDefinition()
                        {
                            SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                            SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMax),
                            Aggregation = SeriesAggregationOptions.Mean,
                            BinGranularity = BinGranularities.ByYear,
                            Smoothing = SeriesSmoothingOptions.None,
                            SmoothingWindow = 5,
                            Value = SeriesValueOptions.Value,
                            Year = null
                        }
                    },
                Variants =
                    new List<SuggestedChartPresetModel>()
                    {
                        new SuggestedChartPresetModel()
                        {
                            Title = "Plus trendline",
                            Description = "Adds a straight line, fit to the data",
                            ChartSeriesList =
                                new List<ChartSeriesDefinition>()
                                {
                                    new ChartSeriesDefinition()
                                    {
                                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMax),
                                        Aggregation = SeriesAggregationOptions.Mean,
                                        BinGranularity = BinGranularities.ByYear,
                                        ShowTrendline = true,
                                        Smoothing = SeriesSmoothingOptions.None,
                                        SmoothingWindow = 5,
                                        Value = SeriesValueOptions.Value,
                                        Year = null
                                    }
                                }
                        },
                        new SuggestedChartPresetModelWithVariants()
                        {
                            Title = "Temperature anomaly",
                            Description = "Yearly average maximum daily temperatures relative to the average of the whole dataset",
                            ChartSeriesList =
                                new List<ChartSeriesDefinition>()
                                {
                                    new ChartSeriesDefinition()
                                    {
                                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMax),
                                        Aggregation = SeriesAggregationOptions.Mean,
                                        BinGranularity = BinGranularities.ByYear,
                                        Smoothing = SeriesSmoothingOptions.None,
                                        SmoothingWindow = 5,
                                        Value = SeriesValueOptions.Anomaly,
                                        Year = null,
                                        DisplayStyle = SeriesDisplayStyle.Bar
                                    }
                                }
                        },
                        new SuggestedChartPresetModel()
                        {
                            Title = "Temperature + solar radiation",
                            Description = "Shows yearly solar radiation and maximum temperature averages",
                            ChartSeriesList =
                                new List<ChartSeriesDefinition>()
                                {
                                    new ChartSeriesDefinition()
                                    {
                                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMaxUnadjustedOrUnspecified),
                                        Aggregation = SeriesAggregationOptions.Mean,
                                        BinGranularity = BinGranularities.ByYearAndMonth,
                                        ShowTrendline = false,
                                        Smoothing = SeriesSmoothingOptions.MovingAverage,
                                        SmoothingWindow = 3,
                                        Value = SeriesValueOptions.Value,
                                        Year = null
                                    },
                                    new ChartSeriesDefinition()
                                    {
                                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, solarRadiation),
                                        Aggregation = SeriesAggregationOptions.Mean,
                                        BinGranularity = BinGranularities.ByYearAndMonth,
                                        ShowTrendline = false,
                                        Smoothing = SeriesSmoothingOptions.MovingAverage,
                                        SmoothingWindow = 3,
                                        Value = SeriesValueOptions.Value,
                                        Year = null,
                                        RequestedColour = UiLogic.Colours.Green,
                                    }
                                }
                        }
                    }
            }
        );

        SuggestedPresets.Add(
            new SuggestedChartPresetModelWithVariants()
            {
                Title = "Adjusted vs raw",
                Description = "Compare maximum temperature values that have been adjusted for abormalities with raw values",
                ChartSeriesList =
                    new List<ChartSeriesDefinition>()
                    {
                        new ChartSeriesDefinition()
                        {
                            SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                            SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMax),
                            Aggregation = SeriesAggregationOptions.Mean,
                            BinGranularity = BinGranularities.ByYear,
                            ShowTrendline = false,
                            Smoothing = SeriesSmoothingOptions.None,
                            SmoothingWindow = 5,
                            Value = SeriesValueOptions.Value,
                            Year = null
                        },
                        new ChartSeriesDefinition()
                        {
                            SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                            SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMaxUnadjusted),
                            Aggregation = SeriesAggregationOptions.Mean,
                            BinGranularity = BinGranularities.ByYear,
                            ShowTrendline = false,
                            Smoothing = SeriesSmoothingOptions.None,
                            SmoothingWindow = 5,
                            Value = SeriesValueOptions.Value,
                            Year = null
                        }
                    },
                Variants =
                    new List<SuggestedChartPresetModel>()
                    {
                        new SuggestedChartPresetModel()
                        {
                            Title = "Plus trendline",
                            Description = "Adds a straight line, fit to the data",
                            ChartSeriesList =
                                new List<ChartSeriesDefinition>()
                                {
                                    new ChartSeriesDefinition()
                                    {
                                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMax),
                                        Aggregation = SeriesAggregationOptions.Mean,
                                        BinGranularity = BinGranularities.ByYear,
                                        ShowTrendline = true,
                                        Smoothing = SeriesSmoothingOptions.None,
                                        SmoothingWindow = 5,
                                        Value = SeriesValueOptions.Value,
                                        Year = null
                                    },
                                    new ChartSeriesDefinition()
                                    {
                                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMaxUnadjusted),
                                        Aggregation = SeriesAggregationOptions.Mean,
                                        BinGranularity = BinGranularities.ByYear,
                                        ShowTrendline = true,
                                        Smoothing = SeriesSmoothingOptions.None,
                                        SmoothingWindow = 5,
                                        Value = SeriesValueOptions.Value,
                                        Year = null
                                    }
                                }
                        },
                        new SuggestedChartPresetModel()
                        {
                            Title = "Moving average only",
                            Description = "Shows 10 year moving average for each dataset",
                            ChartSeriesList =
                                new List<ChartSeriesDefinition>()
                                {
                                    new ChartSeriesDefinition()
                                    {
                                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMax),
                                        Aggregation = SeriesAggregationOptions.Mean,
                                        BinGranularity = BinGranularities.ByYear,
                                        ShowTrendline = false,
                                        Smoothing = SeriesSmoothingOptions.MovingAverage,
                                        SmoothingWindow = 10,
                                        Value = SeriesValueOptions.Value,
                                        Year = null
                                    },
                                    new ChartSeriesDefinition()
                                    {
                                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMaxUnadjusted),
                                        Aggregation = SeriesAggregationOptions.Mean,
                                        BinGranularity = BinGranularities.ByYear,
                                        ShowTrendline = false,
                                        Smoothing = SeriesSmoothingOptions.MovingAverage,
                                        SmoothingWindow = 10,
                                        Value = SeriesValueOptions.Value,
                                        Year = null
                                    }
                                }
                        },
                        new SuggestedChartPresetModel()
                        {
                            Title = "Compare minimums",
                            Description = "Adjusted vs raw minimum temperatures",
                            ChartSeriesList =
                                new List<ChartSeriesDefinition>()
                                {
                                    new ChartSeriesDefinition()
                                    {
                                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMin),
                                        Aggregation = SeriesAggregationOptions.Mean,
                                        BinGranularity = BinGranularities.ByYear,
                                        ShowTrendline = false,
                                        Smoothing = SeriesSmoothingOptions.None,
                                        SmoothingWindow = 5,
                                        Value = SeriesValueOptions.Value,
                                        Year = null
                                    },
                                    new ChartSeriesDefinition()
                                    {
                                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMinUnadjusted),
                                        Aggregation = SeriesAggregationOptions.Mean,
                                        BinGranularity = BinGranularities.ByYear,
                                        ShowTrendline = false,
                                        Smoothing = SeriesSmoothingOptions.None,
                                        SmoothingWindow = 5,
                                        Value = SeriesValueOptions.Value,
                                        Year = null
                                    }
                                }
                        },
                    }
            }
        );

        SuggestedPresets.Add(
            new SuggestedChartPresetModelWithVariants()
                {
                    Title = "Days of extremes",
                    Description = "Number of frosty days (≤ 2.2°C) and days 35°C or above; 20-year smoothing",
                    ChartSeriesList =
                        new List<ChartSeriesDefinition>()
                        {
                        new ChartSeriesDefinition()
                        {
                            SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                            SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMax),
                            Aggregation = SeriesAggregationOptions.Sum,
                            BinGranularity = BinGranularities.ByYear,
                            Smoothing = SeriesSmoothingOptions.MovingAverage,
                            SmoothingWindow = 20,
                            Value = SeriesValueOptions.Value,
                            Year = null,
                            DisplayStyle = SeriesDisplayStyle.Line,
                            SeriesTransformation = SeriesTransformations.EqualOrAbove35,
                        },
                        new ChartSeriesDefinition()
                        {
                            SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                            SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMin),
                            Aggregation = SeriesAggregationOptions.Sum,
                            BinGranularity = BinGranularities.ByYear,
                            Smoothing = SeriesSmoothingOptions.MovingAverage,
                            SmoothingWindow = 20,
                            Value = SeriesValueOptions.Value,
                            Year = null,
                            DisplayStyle = SeriesDisplayStyle.Line,
                            SeriesTransformation = SeriesTransformations.IsFrosty,
                        }
                        },
                    Variants = new List<SuggestedChartPresetModel>()
                        {
                        new SuggestedChartPresetModelWithVariants()
                        {
                            Title = "First day of frost",
                            Description = "First day of the year that has temperature ≤ 2.2°C; 20-year smoothing",
                            ChartSeriesList =
                                new List<ChartSeriesDefinition>()
                                {
                                    new ChartSeriesDefinition()
                                    {
                                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMin),
                                        Aggregation = SeriesAggregationOptions.Minimum,
                                        BinGranularity = BinGranularities.ByYear,
                                        Smoothing = SeriesSmoothingOptions.MovingAverage,
                                        SmoothingWindow = 20,
                                        Value = SeriesValueOptions.Value,
                                        Year = null,
                                        DisplayStyle = SeriesDisplayStyle.Line,
                                        SeriesTransformation = SeriesTransformations.DayOfYearIfFrost,
                                    },
                                }
                        },
                        new SuggestedChartPresetModelWithVariants()
                        {
                            Title = "Last day of frost",
                            Description = "Last day of the year that has temperature ≤ 2.2°C; 20-year smoothing",
                            ChartSeriesList =
                                new List<ChartSeriesDefinition>()
                                {
                                    new ChartSeriesDefinition()
                                    {
                                        SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                        SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, tempMin),
                                        Aggregation = SeriesAggregationOptions.Maximum,
                                        BinGranularity = BinGranularities.ByYear,
                                        Smoothing = SeriesSmoothingOptions.MovingAverage,
                                        SmoothingWindow = 20,
                                        Value = SeriesValueOptions.Value,
                                        Year = null,
                                        DisplayStyle = SeriesDisplayStyle.Line,
                                        SeriesTransformation = SeriesTransformations.DayOfYearIfFrost,
                                    }
                                }
                        }
                        }
                }
        );

        SuggestedPresets.Add(
        new SuggestedChartPresetModelWithVariants()
            {
                Title = "Days of rain",
                Description = "Number of rainy days, ≥ 1mm and ≥ 10mm; 20-year smoothing",
                ChartSeriesList =
                    new List<ChartSeriesDefinition>()
                    {
                            new ChartSeriesDefinition()
                            {
                                SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, rainfall),
                                Aggregation = SeriesAggregationOptions.Sum,
                                BinGranularity = BinGranularities.ByYear,
                                Smoothing = SeriesSmoothingOptions.MovingAverage,
                                SmoothingWindow = 20,
                                Value = SeriesValueOptions.Value,
                                Year = null,
                                DisplayStyle = SeriesDisplayStyle.Line,
                                SeriesTransformation = SeriesTransformations.EqualOrAbove1,
                                RequestedColour = UiLogic.Colours.Blue,
                            },
                            new ChartSeriesDefinition()
                            {
                                SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, rainfall),
                                Aggregation = SeriesAggregationOptions.Sum,
                                BinGranularity = BinGranularities.ByYear,
                                Smoothing = SeriesSmoothingOptions.MovingAverage,
                                SmoothingWindow = 20,
                                Value = SeriesValueOptions.Value,
                                Year = null,
                                DisplayStyle = SeriesDisplayStyle.Line,
                                SeriesTransformation = SeriesTransformations.EqualOrAbove10,
                                RequestedColour = UiLogic.Colours.Pink,
                            }
                    },
                Variants =
                        new List<SuggestedChartPresetModel>()
                        {
                            new SuggestedChartPresetModel()
                            {
                                Title = "Heavy rain",
                                Description = "Number of rainy days, ≥ 10mm and ≥ 25mm; 20-year smoothing",
                                ChartSeriesList =
                                    new List<ChartSeriesDefinition>()
                                    {
                                        new ChartSeriesDefinition()
                                        {
                                            SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                            SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, rainfall),
                                            Aggregation = SeriesAggregationOptions.Sum,
                                            BinGranularity = BinGranularities.ByYear,
                                            Smoothing = SeriesSmoothingOptions.MovingAverage,
                                            SmoothingWindow = 20,
                                            Value = SeriesValueOptions.Value,
                                            Year = null,
                                            DisplayStyle = SeriesDisplayStyle.Line,
                                            SeriesTransformation = SeriesTransformations.EqualOrAbove10AndLessThan25,
                                            RequestedColour = UiLogic.Colours.Blue,
                                        },
                                        new ChartSeriesDefinition()
                                        {
                                            SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                            SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(SelectedLocation, rainfall),
                                            Aggregation = SeriesAggregationOptions.Sum,
                                            BinGranularity = BinGranularities.ByYear,
                                            Smoothing = SeriesSmoothingOptions.MovingAverage,
                                            SmoothingWindow = 20,
                                            Value = SeriesValueOptions.Value,
                                            Year = null,
                                            DisplayStyle = SeriesDisplayStyle.Line,
                                            SeriesTransformation = SeriesTransformations.EqualOrAbove25,
                                            RequestedColour = UiLogic.Colours.Pink,
                                        }
                                    }
                            }
                        }
            }
        );

        SuggestedPresets.Add(
            new SuggestedChartPresetModelWithVariants()
                {
                    Title = "Greenhouse gases (GHGs)",
                    Description = "The Keeling Curve: carbon dioxide (CO\u2082) records from the Mauna Loa Observatory since 1958",
                    ChartSeriesList =
                        new List<ChartSeriesDefinition>()
                        {
                                new ChartSeriesDefinition()
                                {
                                    SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                    SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(null, c2o),
                                    Aggregation = SeriesAggregationOptions.Mean,
                                    BinGranularity = BinGranularities.ByYearAndMonth,
                                    Smoothing = SeriesSmoothingOptions.None,
                                    SmoothingWindow = 5,
                                    Value = SeriesValueOptions.Value,
                                    Year = null,
                                    DisplayStyle = SeriesDisplayStyle.Line,
                                    RequestedColour = UiLogic.Colours.Brown,
                                },
                        },
                    Variants =
                            new List<SuggestedChartPresetModel>()
                            {
                                new SuggestedChartPresetModel()
                                {
                                    Title = "Methane (CH\u2084)",
                                    Description = "NOAA's Earth System Research Laboratory has measured methane since 1983",
                                    ChartSeriesList =
                                        new List<ChartSeriesDefinition>()
                                        {
                                            new ChartSeriesDefinition()
                                            {
                                                SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                                SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(null, ch4),
                                                Aggregation = SeriesAggregationOptions.Mean,
                                                BinGranularity = BinGranularities.ByYearAndMonth,
                                                Smoothing = SeriesSmoothingOptions.None,
                                                SmoothingWindow = 5,
                                                Value = SeriesValueOptions.Value,
                                                Year = null,
                                                DisplayStyle = SeriesDisplayStyle.Line,
                                                RequestedColour = UiLogic.Colours.Brown,
                                            },
                                        }
                                },
                                new SuggestedChartPresetModel()
                                {
                                    Title = "Nitrous oxide (N\u2082O)",
                                    Description = "NOAA's Earth System Research Laboratory has measured nitrous oxide since 1997",
                                    ChartSeriesList =
                                        new List<ChartSeriesDefinition>()
                                        {
                                            new ChartSeriesDefinition()
                                            {
                                                SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                                SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(null, n2o),
                                                Aggregation = SeriesAggregationOptions.Mean,
                                                BinGranularity = BinGranularities.ByYearAndMonth,
                                                Smoothing = SeriesSmoothingOptions.None,
                                                SmoothingWindow = 5,
                                                Value = SeriesValueOptions.Value,
                                                Year = null,
                                                DisplayStyle = SeriesDisplayStyle.Line,
                                                RequestedColour = UiLogic.Colours.Brown,
                                            }
                                        }
                                }
                            }
                }
            );

        SuggestedPresets.Add(
        new SuggestedChartPresetModelWithVariants()
            {
                Title = "Sea ice extent",
                Description = "Antarctic and Arctic sea ice, measured in millions of square kilometres since 1979",
                ChartSeriesList =
                        new List<ChartSeriesDefinition>()
                        {
                                new ChartSeriesDefinition()
                                {
                                    SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                    SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(null, southSeaIceExtent),
                                    Aggregation = SeriesAggregationOptions.Mean,
                                    BinGranularity = BinGranularities.ByYear,
                                    Smoothing = SeriesSmoothingOptions.MovingAverage,
                                    SmoothingWindow = 3,
                                    Value = SeriesValueOptions.Value,
                                    Year = null,
                                    DisplayStyle = SeriesDisplayStyle.Line,
                                    RequestedColour = UiLogic.Colours.Blue,
                                    GroupingThreshold = 0.1f,
                                },
                                new ChartSeriesDefinition()
                                {
                                    SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                    SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(null, northSeaIceExtent),
                                    Aggregation = SeriesAggregationOptions.Mean,
                                    BinGranularity = BinGranularities.ByYear,
                                    Smoothing = SeriesSmoothingOptions.MovingAverage,
                                    SmoothingWindow = 3,
                                    Value = SeriesValueOptions.Value,
                                    Year = null,
                                    DisplayStyle = SeriesDisplayStyle.Line,
                                    RequestedColour = UiLogic.Colours.Orange,
                                    GroupingThreshold = 0.1f,
                                },
                        },
                Variants =
                            new List<SuggestedChartPresetModel>()
                            {
                                new SuggestedChartPresetModel()
                                {
                                    Title = "Greenland ice melt area",
                                    Description = "Smoothed ice melt area, measured in square kilometres since 1979",
                                    ChartSeriesList =
                                        new List<ChartSeriesDefinition>()
                                        {
                                            new ChartSeriesDefinition()
                                            {
                                                SeriesDerivationType = SeriesDerivationTypes.ReturnSingleSeries,
                                                SourceSeriesSpecifications = SourceSeriesSpecification.BuildArray(null, greenland),
                                                Aggregation = SeriesAggregationOptions.Sum,
                                                BinGranularity = BinGranularities.ByYear,
                                                Smoothing = SeriesSmoothingOptions.MovingAverage,
                                                SmoothingWindow = 3,
                                                Value = SeriesValueOptions.Value,
                                                Year = null,
                                                DisplayStyle = SeriesDisplayStyle.Line,
                                                RequestedColour = UiLogic.Colours.Blue,
                                            },
                                        }
                                },
                            },
            }
        );

        // Presets may call for data that is not available at all locations. In those
        // cases, remove the ChartSeries entries that aren't available & set a flag
        // on the preset so that an indicator can be shown to the user.
        foreach (var p in SuggestedPresets)
        {
            p.MissingChartSeries = false;

            foreach (var csd in p.ChartSeriesList.ToArray())
            {
                if (!csd.SourceSeriesSpecifications.Any() || csd.SourceSeriesSpecifications.Any(x => x.MeasurementDefinition == null))
                {
                    p.ChartSeriesList.Remove(csd);

                    p.MissingChartSeries = true;
                }
            }

            if (p.Variants != null)
            {
                foreach (var v in p.Variants)
                {
                    v.MissingChartSeries = false;

                    foreach (var csd in v.ChartSeriesList.ToArray())
                    {
                        if (!csd.SourceSeriesSpecifications.Any() || csd.SourceSeriesSpecifications.Any(x => x.MeasurementDefinition == null))
                        {
                            v.ChartSeriesList.Remove(csd);

                            v.MissingChartSeries = true;
                        }
                    }
                }
            }
        }
    }
}