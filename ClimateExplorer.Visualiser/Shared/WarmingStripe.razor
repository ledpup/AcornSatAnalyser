@using Blazorise
@using ClimateExplorer.Visualiser.UiModel
@using ClimateExplorer.Core.DataPreparation
@using static ClimateExplorer.Core.Enums

<div class="warming-stripe">
    @if (DataRecords != null)
    {
        foreach (var record in DataRecords)
        {
            <div title="@GetTitle(record.Value)" class="single-stripe" style="background-color: @GetColour(record.Value);">
                <div class="label">
                    <div class="year" style="color: @GetTextColour(record.Value, "#ccc", "#333")">@record.Year</div>
                    <div class="amt" style="color: @GetTextColour(record.Value, "#eee", "#555")">@GetRelativeTemp(record.Value)</div>
                </div>
            </div>
        }
    }
    <div style="display:flex; align-items:center; margin-left: 8px; color: #79c6f4;">
        <i class="fas fa-circle-info" style="cursor: pointer;" @onclick=ShowClimateStripeInfo></i>
    </div>

    @if (PopupText != null)
    {
        <Modal @ref="popup">
            <ModalContent Size="ModalSize.Large">
                <ModalHeader>
                    <ModalTitle>Climate stripe</ModalTitle>
                    <CloseButton />
                </ModalHeader>
                <ModalBody>
                    @((MarkupString)PopupText)
                </ModalBody>
            </ModalContent>
        </Modal>
    }
</div>

@code {
        [Parameter]
        public string? LocationName { get; set; }

        [Parameter]
        public float? LocationTemperatureMean { get; set; }

        [Parameter]
        public List<YearAndValue> DataRecords { get; set; }

        List<YearAndValue> PreviouslySeenDataRecords { get; set; }

        [Inject]
        public ILogger<WarmingStripe> Logger { get; set; }

        float min;
        float max;
        float normalisedMin;
        float normalisedMax;

    public string PopupText { get; set; }

    private Modal popup;
    private Task ShowClimateStripeInfo()
    {
        if (!string.IsNullOrWhiteSpace(PopupText))
        {
            return popup.Show();
        }
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (LocationTemperatureMean == null)
        {
            return;
        }

        if (YearAndValueListsAreEqual(PreviouslySeenDataRecords, DataRecords))
        {
            return;
        }

        if (DataRecords != null)
        {
            min = DataRecords.Min(x => x.Value);
            max = DataRecords.Max(x => x.Value);

            // If the max and min are not above or below 1, set them to 1
            // This will wash out the colours on a stripe where the values don't deviate much from the average
            // This is okay because we don't want it to look like extreme heating/cooling unless there are larger variations
            normalisedMin = min < -1 ? min : -1;
            normalisedMax = max > 1 ? max : 1;
        }

        PreviouslySeenDataRecords = DataRecords;

        var url = "\"https://en.wikipedia.org/wiki/Warming_stripes\"";

        PopupText = $@"<p>A <a href={url} target=""_blank"">climate stripe</a> is a simplified graph of coloured stripes, ordered by year, representing the average temperate for each year. They visually portray long-term temperature trends.</p>
<p>Climate stripe colours are calculated by the following algorithm.</p>
<ol>
<li>Calculate the average temperature for the whole series (e.g., {LocationName} {DataRecords.First().Year}-{DataRecords.Last().Year} mean is {Math.Round(LocationTemperatureMean.Value, 1)}°C)</li>
<li>For each year in the series, subtract the average temperature for the <strong>year</strong> from the average for the <strong>series</strong>. Note:</li>
    <ul>
        <li>This value in step 2 is often called the temperature anomaly.</li>
        <li>If the anomaly is above 0°C, we consider it a warmer than average year.</li>
        <li>If the anomaly is below 0°C, we consider it a colder than average year.</li>
    </ul>
<li>Find the coldest anomaly (e.g., {LocationName}'s is {Math.Round(min, 1)}°C) and assign it the strongest colour of blue</li>
<li>Find the warmest anomaly (e.g., {LocationName}'s is {Math.Round(max, 1)}°C) and assign it the strongest colour of red</li>
<li>All anomalies between the extremes are lighter shades of blue or red</li>
</ol>
<p>Climate Explorer's stripe is interactive. Hover over any year in the series then click. The chart will update with a monthly view of the selected year.";

        await base.OnParametersSetAsync();
    }

    bool YearAndValueListsAreEqual(List<YearAndValue> a, List<YearAndValue> b)
    {
        // If they're both null, the lists are the same
        if (a == null && b == null) return true;

        // If one is null, the lists are different
        if ((a == null) || (b == null)) return false;

        // If length is different, the lists are different
        if (a.Count != b.Count) return false;

        for (int i = 0; i < a.Count; i++)
        {
            // If a year is different, the lists are different
            if (a[i].Year != b[i].Year) return false;

            // If a value is different, the lists are different
            if (a[i].Value != b[i].Value) return false;
        }

        return true;
    }

    string GetColour(float value)
    {
        if (value > 0)
        {
            return $"rgba(255, {255 - ((Math.Abs(value / normalisedMax)) * 255)}, {255 - ((Math.Abs(value / normalisedMax)) * 255)}, 75%)";
        }
        else
        {
            return $"rgba({255 - ((Math.Abs(value / normalisedMin)) * 255)}, {255 - ((Math.Abs(value / normalisedMin)) * 255)}, 255, 75%)";
        }
    }

    string GetRelativeTemp(float v) => $"{(v >= 0 ? "+" : "")}{MathF.Round(v, 1)}°C";

    string GetTitle(float value)
    {
        var aboveOrBelow = value > 0 ? "above" : "below";
        return $"{MathF.Round(value, 1)}°C {aboveOrBelow} average";
    }

    string GetTextColour(float value, string lightTextColour, string darkTextColour)
    {
        return MathF.Round(value, 1) <= min / 2 ? lightTextColour : darkTextColour;
    }
}
