@using Blazorise
@using DPBlazorMapLibrary;

<div class="mapContainer collapsed" id="mapContainer">
    <DPBlazorMapLibrary.Map @ref="map" MapOptions="@mapOptions" AfterRender="@AfterMapRender"></DPBlazorMapLibrary.Map>

    <div class="@(IsMapExpanded ? "mapToggleExpanded" : "mapToggleCollapsed")">
        <Button Color="Color.Primary" Clicked="@ToggleMapExpansion" Class="map-toggle-button">
            @if (IsMapExpanded)
            {
                <span><i class="fas fa-compress"></i> Collapse</span>
            }
            else
            {
                <span><i class="fas fa-expand"></i> Expand</span>
            }
        </Button>
    </div>
</div>

@code {
    [Parameter] public IEnumerable<Location> Locations { get; set; }
    [Parameter] public EventCallback<Guid> OnLocationChange { get; set; }
    [Parameter] public bool IsMobileDevice { get; set; }

    [Inject] public LayerFactory LayerFactory { get; init; }
    [Inject] IIconFactory IconFactory { get; init; }
    [Inject] IJSRuntime JS { get; init; }
    [Inject] ILogger<MapContainer> Logger { get; init; }

    Map map;
    private MapOptions mapOptions;
    bool IsMapExpanded { get; set; } = false;

    bool _mapMarkersCreated = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        mapOptions =
            new MapOptions()
            {
                Center = new LatLng(-25.6, 134.3),
                Zoom = 8,
                Dragging = !IsMobileDevice,
                //Touch = !IsMobileDevice,
            };
    }

    private async Task AfterMapRender()
    {
        // Create Tile Layer
        var tileLayerOptions =
            new TileLayerOptions()
            {
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors"
            };

        var mainTileLayer = await LayerFactory.CreateTileLayerAndAddToMap("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", map, tileLayerOptions);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Locations != null)
        {
            await EnsureMapMarkers();
        }

        await base.OnParametersSetAsync();
    }


    public async Task ScrollToPoint(LatLng point)
    {
        await map.PanTo(point);
    }

    public async Task EnsureMapMarkers()
    {
        if (_mapMarkersCreated)
        {
            return;
        }

        Logger.LogInformation("Creating map markers");

        var markerOptions = new List<MarkerOptions>();
        for (var i = -1; i < 11; i++)
        {
            var label = i == -1 
                                ? "negative"
                                : i == 10 
                                    ? "null" 
                                    : i.ToString();
            var iconOptions = new IconOptions
                {
                    IconUrl = $"/images/map-markers/{ label }.png",
                    IconSize = new Point(48, 48),
                    IconAnchor = new Point(23, 47),
                };

            markerOptions.Add(
                new MarkerOptions
                {
                    Alt = label,
                    Opacity = 0.75,
                    Draggable = false,
                    IconRef = await this.IconFactory.Create(iconOptions),
                });
        }

        foreach (var location in Locations)
        {
            var label = location.HeatingScore == null 
                    ? "null"
                    : location.HeatingScore.Value < 0
                        ? "negative" 
                        : location.HeatingScore.Value.ToString();


            var markerOption = markerOptions.Single(x => x.Alt == label);
            var marker = await this.LayerFactory.CreateMarkerAndAddToMap(new LatLng(location.Coordinates.Latitude, location.Coordinates.Longitude, location.Coordinates.Elevation), map, markerOption);

            await marker.BindTooltip(location.Name);
            await marker.OnClick(async (MouseEvent mouseEvent) => await HandleMapMouseEvent(mouseEvent));
        }

        _mapMarkersCreated = true;
    }

    async Task HandleMapMouseEvent(MouseEvent mouseEvent)
    {
        Logger.LogInformation("HandleMapMouseEvent()");

        var lat = Math.Round(mouseEvent.LatLng.Lat, 1);
        var lng = Math.Round(mouseEvent.LatLng.Lng, 1);
        var newLocation = Locations.Single(x => Math.Round(x.Coordinates.Latitude, 1) == lat && Math.Round(x.Coordinates.Longitude, 1) == lng);
        await CollapseMapIfExpanded();
        await OnLocationChange.InvokeAsync(newLocation.Id);
    }

    async Task CollapseMapIfExpanded()
    {
        if (IsMapExpanded)
        {
            await ToggleMapExpansion();
        }
    }

    async Task ToggleMapExpansion()
    {
        await JS.InvokeVoidAsync("toggleMapExpansion", null);

        IsMapExpanded = !IsMapExpanded;
    }
}
