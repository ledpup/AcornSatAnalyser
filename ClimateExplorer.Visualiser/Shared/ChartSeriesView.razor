@using ClimateExplorer.Visualiser.UiLogic
@using ClimateExplorer.Visualiser.UiModel
@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts
@using ClimateExplorer.Core.DataPreparation

<div class="chart-series-config">
    <div class="title-bar" @onclick="() => { ChartSeries.IsExpanded = !ChartSeries.IsExpanded; }" style="@GenerateStyleForTitleBar()">
        <div class="main">
            <div class="title">@ChartSeries.GetFriendlyTitleShort()</div>
            <div class="description">@ChartSeries.GetFriendlyDescription()</div>
        </div>
        <div class="expander">
            <span class="oi oi-chevron-bottom" aria-hidden="true"></span>
        </div>
    </div>

    @if (ChartSeries.IsExpanded)
    {
        <div class="chart-series-config-content" style="@GenerateStyleForTitleBar()">
            <div class="edit-form">
                <table>
                    @if (ChartSeries.Year.HasValue)
                    {
                        <tr>
                            <td>Filter to year</td>
                            <td>@ChartSeries.Year</td>
                        </tr>
                    }
                    <tr>
                        <td>Aggregation</td>
                        <td>
                            <Select TValue="SeriesAggregationOptions" 
                                    Size="Size.ExtraSmall"
                                    SelectedValue="@ChartSeries.Aggregation"
                                    SelectedValueChanged="@OnAggregationChanged">
                                <SelectItem Value="SeriesAggregationOptions.Mean">Mean</SelectItem>
                                <SelectItem Value="SeriesAggregationOptions.Minimum">Minimum</SelectItem>
                                <SelectItem Value="SeriesAggregationOptions.Maximum">Maximum</SelectItem>
                                <SelectItem Value="SeriesAggregationOptions.Median">Median</SelectItem>
                                <SelectItem Value="SeriesAggregationOptions.Sum">Sum</SelectItem>
                            </Select>
                        </td>
                    </tr>

                    @if (ChartSeries.Smoothing != SeriesSmoothingOptions.None && !ChartSeries.BinGranularity.IsLinear())
                    {
                    <tr>
                        <td colspan="2" class="info-message">Note that smoothing is not currently being applied because the x-axis is not linear.</td>
                    </tr>
                    }
                    <tr>
                        <td>Smoothing</td>
                        <td>
                            <Select TValue="SeriesSmoothingOptions" 
                                    Size="Size.ExtraSmall"
                                    SelectedValue="@ChartSeries.Smoothing"
                                    SelectedValueChanged="@OnSmoothingChanged">
                                <SelectItem Value="SeriesSmoothingOptions.None">None</SelectItem>
                                <SelectItem Value="SeriesSmoothingOptions.MovingAverage">Moving average</SelectItem>
                            </Select>
                        </td>
                    </tr>
                    <tr>
                        <td>Smoothing window</td>
                        <td>
                            <Select TValue="int"
                                    Size="Size.ExtraSmall"
                                    SelectedValue="@ChartSeries.SmoothingWindow"
                                    SelectedValueChanged="@OnSmoothingWindowChanged"
                                    Disabled="@ShouldDisableSmoothingWindow(ChartSeries)">
                                <SelectItem Value="3">3</SelectItem>
                                <SelectItem Value="5">5</SelectItem>
                                <SelectItem Value="7">7</SelectItem>
                                <SelectItem Value="10">10</SelectItem>
                                <SelectItem Value="12">12</SelectItem>
                                <SelectItem Value="15">15</SelectItem>
                                <SelectItem Value="20">20</SelectItem>
                            </Select>
                        </td>
                    </tr>
                    <tr>
                        <td>Display</td>
                        <td>
                            <Select TValue="SeriesValueOptions" 
                                    Size="Size.ExtraSmall"
                                    SelectedValue="@ChartSeries.Value"
                                    SelectedValueChanged="@OnValueChanged">
                                <SelectItem Value="SeriesValueOptions.Value">Value</SelectItem>
                                <SelectItem Value="SeriesValueOptions.Anomaly">Anomaly relative to mean</SelectItem>
                            </Select>
                        </td>
                    </tr>
                    <tr>
                        <td>Transformation</td>
                        <td>
                            <Select TValue="SeriesTransformations" 
                                    Size="Size.ExtraSmall"
                                    SelectedValue="@ChartSeries.SeriesTransformation"
                                    SelectedValueChanged="@OnTransformationChanged">
                                <SelectItem Value="SeriesTransformations.Identity">Identity</SelectItem>
                                <SelectItem Value="SeriesTransformations.Negate">Negate</SelectItem>
                                <SelectItem Value="SeriesTransformations.EqualOrAbove35">Days 35°C or above</SelectItem>
                                <SelectItem Value="SeriesTransformations.IsFrosty">Days of frost</SelectItem>
                                <SelectItem Value="SeriesTransformations.DayOfYearIfFrost">Day of year if frost</SelectItem>
                                <SelectItem Value="SeriesTransformations.EqualOrAbove1">Days of 1mm of rain or more</SelectItem>
                                <SelectItem Value="SeriesTransformations.EqualOrAbove1AndLessThan10">Days between 1mm and 10mm of rain</SelectItem>
                                <SelectItem Value="SeriesTransformations.EqualOrAbove10">Days of 10mm of rain or more</SelectItem>
                                <SelectItem Value="SeriesTransformations.EqualOrAbove10AndLessThan25">Days between 10mm and 25mm of rain</SelectItem>
                                <SelectItem Value="SeriesTransformations.EqualOrAbove25">Days of 25mm of rain or more</SelectItem>
                            </Select>
                        </td>
                    </tr>
                    <tr>
                        <td>Display style</td>
                        <td>
                            <Select TValue="SeriesDisplayStyle" 
                                    Size="Size.ExtraSmall"
                                    SelectedValue="@ChartSeries.DisplayStyle"
                                    SelectedValueChanged="@OnDisplayStyleChanged">
                                <SelectItem Value="SeriesDisplayStyle.Line">Line</SelectItem>
                                <SelectItem Value="SeriesDisplayStyle.Bar">Bar</SelectItem>
                            </Select>
                        </td>
                    </tr>
                    <tr>
                        <td>Colour</td>
                        <td>
                            <Select TValue="Colours"
                                Size="Size.ExtraSmall"
                                SelectedValue="@ChartSeries.RequestedColour"
                                SelectedValueChanged="@OnColourChanged">
                                @foreach (var colour in (Colours[])Enum.GetValues(typeof(Colours)))
                                {
                                    <SelectItem Value="@colour">@GetColourName(colour)</SelectItem>
                                }
                            </Select>
                        </td>
                    </tr>
                    <tr>
                        <td>Show trendline</td>
                        <td>
                            <Check TValue="bool" Checked="@ChartSeries.ShowTrendline" CheckedChanged="@OnShowTrendlineChanged"></Check>
                        </td>
                    </tr>
                    <tr>
                        <td>Lock?</td>
                        <td>
                            <Check TValue="bool" Checked="@ChartSeries.IsLocked" CheckedChanged="@OnIsLockedChanged"></Check>
                        </td>
                    </tr>
                </table>
            </div>

            <div class="series-controls">
                <div class="series-control" title="About this data" @onclick="@OnAboutThisDataClicked">
                    <i class="fas fa-info"></i>
                    <div class="label">About</div>
                </div>
                <div class="series-control" title="Duplicate this series" @onclick="@OnDuplicateSeriesClicked">
                    <i class="fas fa-clone"></i>
                    <div class="label">Clone</div>
                </div>
                <div class="series-control danger" title="Remove this series" @onclick="@OnRemoveSeriesClicked">
                    <i class="fas fa-trash"></i>
                    <div class="label">Remove</div>
                </div>
            </div>

        </div>
    }
</div>

<AboutData @ref="_aboutData" ChartSeries="@ChartSeries" />

@code {
    [Parameter]
    public ChartSeriesDefinition ChartSeries { get; set; }

    [Parameter]
    public EventCallback OnSeriesChanged { get; set; }

    [Parameter]
    public EventCallback<ChartSeriesDefinition> OnDuplicateSeries { get; set; }

    [Parameter]
    public EventCallback<ChartSeriesDefinition> OnRemoveSeries { get; set; }

    [Parameter]
    public ChartSeriesTitleStyle TitleStyle { get; set; }

    AboutData _aboutData;

    public enum ChartSeriesTitleStyle
    {
        WholeTitleBarInSeriesColour,
        OnlyIndicatorAndTextInSeriesColour
    }

    public string GenerateStyleForColourIndicator()
    {
        return "background-color: " + ChartSeries.Colour;
    }

    public string GenerateStyleForTitleBar()
    {
        switch (TitleStyle)
        {
            case ChartSeriesTitleStyle.WholeTitleBarInSeriesColour:
                return "color: #425f59; border-left: solid 12px " + ChartSeries.Colour + ";";
            case ChartSeriesTitleStyle.OnlyIndicatorAndTextInSeriesColour:
                return "color: " + ChartSeries.Colour;
            default:
                throw new NotImplementedException($"TitleStyle {TitleStyle}");
        }
    }

    bool ShouldDisableSmoothingWindow(ChartSeriesDefinition csd)
    {
        return csd.Smoothing != SeriesSmoothingOptions.MovingAverage;
    }

    async Task OnAboutThisDataClicked()
    {
        await _aboutData.Show();
    }

    async Task OnDuplicateSeriesClicked()
    {
        await OnDuplicateSeries.InvokeAsync(ChartSeries);
    }

    async Task OnRemoveSeriesClicked()
    {
        await OnRemoveSeries.InvokeAsync(ChartSeries);
    }

    async Task OnAggregationChanged(SeriesAggregationOptions o)
    {
        ChartSeries.Aggregation = o;

        await OnSeriesChanged.InvokeAsync();
    }

    async Task OnSmoothingChanged(SeriesSmoothingOptions o)
    {
        ChartSeries.Smoothing = o;

        await OnSeriesChanged.InvokeAsync();
    }

    async Task OnSmoothingWindowChanged(int w)
    {
        ChartSeries.SmoothingWindow = w;

        await OnSeriesChanged.InvokeAsync();
    }

    async Task OnValueChanged(SeriesValueOptions o)
    {
        ChartSeries.Value = o;

        await OnSeriesChanged.InvokeAsync();
    }

    async Task OnDisplayStyleChanged(SeriesDisplayStyle s)
    {
        ChartSeries.DisplayStyle = s;

        await OnSeriesChanged.InvokeAsync();
    }

    async Task OnColourChanged(Colours c)
    {
        ChartSeries.RequestedColour = c;

        await OnSeriesChanged.InvokeAsync();
    }

    async Task OnTransformationChanged(SeriesTransformations s)
    {
        ChartSeries.SeriesTransformation = s;

        await OnSeriesChanged.InvokeAsync();
    }

    async Task OnIsLockedChanged(bool val)
    {
        ChartSeries.IsLocked = val;
    }

    async Task OnShowTrendlineChanged(bool val)
    {
        ChartSeries.ShowTrendline = val;

        await OnSeriesChanged.InvokeAsync();
    }

    string GetColourName(Colours colour)
    {
        return colour switch
        {
            Colours.AutoAssigned => "Automatic",
            _ => colour.ToString(),
        };
    }
}
