@using ClimateExplorer.Web.UiModel
@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts

@if (ChartSeriesListInternal == null || ChartSeriesListInternal.Count == 0)
{
    <div class="no-datasets-active-message">No datasets active. Choose a chart preset or add a dataset.</div>
}
else
{
    @foreach (var cs in ChartSeriesListInternal)
{
    <ChartSeriesView 
            @key="@cs.Id"
            ChartSeries="@cs" 
            OnSeriesChanged="@OnSeriesChangedInternal"
            OnDuplicateSeries="@OnDuplicateSeries"
            OnRemoveSeries="@OnRemoveSeries"
            ></ChartSeriesView>
}
}

@code {
[Parameter]
public List<ChartSeriesDefinition>? ChartSeriesList { get; set; }

[Parameter]
public EventCallback OnSeriesChanged { get; set; }

List<ChartSeriesDefinition>? ChartSeriesListInternal { get; set; }

protected override void OnParametersSet()
{
    ChartSeriesListInternal = ChartSeriesList?.Where(x => x.DataAvailable).ToList();
}

async Task OnSeriesChangedInternal()
{
    await OnSeriesChanged.InvokeAsync();
}

async Task OnRemoveSeries(ChartSeriesDefinition csd)
{
    ChartSeriesList!.Remove(csd);

    await OnSeriesChangedInternal();
}

async Task OnDuplicateSeries(ChartSeriesDefinition csd)
{
    ChartSeriesList!.Add(
        new ChartSeriesDefinition()
        {
            Aggregation = csd.Aggregation,
            BinGranularity = csd.BinGranularity,
            SeriesDerivationType = csd.SeriesDerivationType,
            SourceSeriesSpecifications =
                csd.SourceSeriesSpecifications!
                .Select(
                    x =>
                    new SourceSeriesSpecification
                    {
                        DataSetDefinition = x.DataSetDefinition,
                        LocationId = x.LocationId,
                        LocationName = x.LocationName,
                        MeasurementDefinition = x.MeasurementDefinition,
                    }
                )
                .ToArray(),
            Smoothing = csd.Smoothing,
            SmoothingWindow = csd.SmoothingWindow,
            Value = csd.Value,
            Year = csd.Year,
            SeriesTransformation = csd.SeriesTransformation,
            GroupingThreshold = csd.GroupingThreshold,
            MinimumDataResolution = csd.MinimumDataResolution,
        }
    );

    await OnSeriesChangedInternal();
}
}
