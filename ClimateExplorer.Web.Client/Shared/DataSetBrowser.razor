@using ClimateExplorer.Core.Model;
@using ClimateExplorer.Core.ViewModel
@using ClimateExplorer.Web.UiModel
@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts
@using static ClimateExplorer.Core.Enums

@if (RootFolders != null)
{
    foreach (var f in RootFolders)
    {
        <div class="dataset-folder">
                <div class="dataset-folder-name">@f.Name</div>
                @foreach (var ds in f.DataSets)
            {
                <div class="entry-list">
                        <a class="add-dataset" @onclick="() => AddDataSet(ds)"><span class="oi oi-plus" aria-hidden="true"></span></a> <span class="dataset-name">@ds.Name</span>
                    </div>
            }
            </div>
    }
}

@code {
    [Parameter]
    public IEnumerable<DataSetDefinitionViewModel>? DataSetDefinitions { get; set; }

    [Parameter]
    public EventCallback<DataSetLibraryEntry> OnAddDataSet { get; set; }

    [Parameter]
    public Location? CurrentLocation { get; set; }

    [Parameter]
    public Location? PreviousLocation { get; set; }

    List<DataSetLibraryFolder>? RootFolders { get; set; }

    string BuildDataSetName(MeasurementDefinitionViewModel md, DataSetDefinitionViewModel dsd)
    {
        List<string> segments = new List<string>();

        switch (md.DataType)
        {
            case DataType.TempMax:
                segments.Add("Temperature");
                segments.Add($"{md.DataResolution} maximum");

                if (md.DataAdjustment != null)
                {
                    segments.Add(md.DataAdjustment.ToString()!);
                }

                break;

            case DataType.TempMin:
                segments.Add("Temperature");
                segments.Add($"{md.DataResolution} minimum");

                if (md.DataAdjustment != null)
                {
                    segments.Add(md.DataAdjustment.ToString()!);
                }

                break;

            case DataType.TempMean:
                segments.Add("Temperature");
                segments.Add($"{md.DataResolution} mean");

                if (md.DataAdjustment != null)
                {
                    segments.Add(md.DataAdjustment.ToString()!);
                }

                break;

            case DataType.Rainfall:
                segments.Add("Rainfall");
                break;

            case DataType.SolarRadiation:
                segments.Add("Solar radiation");
                break;

            case DataType.SouthSeaIce:
                segments.Add("Antarctic sea ice extent");
                break;

            case DataType.NorthSeaIce:
                segments.Add("Arctic sea ice extent");
                break;
        }

        return String.Join(" | ", segments);
    }

    protected override void OnParametersSet()
    {
        RootFolders = new List<DataSetLibraryFolder>();

        if (CurrentLocation != null)
        {
            var currentLocationFolder =
                new DataSetLibraryFolder()
                    {
                        Name = CurrentLocation.Name + " observations",
                        DataSets = new List<DataSetLibraryEntry>()
                    };

            var measurements = DataSetDefinitionViewModel.GetMeasurementsForLocation(DataSetDefinitions!, CurrentLocation.Id);

            foreach (var measurement in measurements)
            {
                var dsd = measurement.Item1;
                var md = measurement.Item2;

                currentLocationFolder.DataSets.Add(
                    new DataSetLibraryEntry()
                        {
                            SourceSeriesSpecifications =
                                new DataSetLibraryEntry.SourceSeriesSpecification[]
                                {
                                    new DataSetLibraryEntry.SourceSeriesSpecification
                                    {
                                        DataType = md.DataType,
                                        DataAdjustment = md.DataAdjustment,
                                        SourceDataSetId = dsd.Id,
                                        LocationId = CurrentLocation.Id,
                                        LocationName = CurrentLocation.Name
                                    }
                                },
                            SeriesDerivationType = ClimateExplorer.Core.DataPreparation.SeriesDerivationTypes.ReturnSingleSeries,
                            Name = BuildDataSetName(md, dsd)
                        });
            }

            // Daily temperature range
            var bestAvailableTempMax =
                   measurements.SingleOrDefault(x => x.Item2.DataType == DataType.TempMax && x.Item2.DataAdjustment == DataAdjustment.Adjusted)
                ?? measurements.SingleOrDefault(x => x.Item2.DataType == DataType.TempMax && x.Item2.DataAdjustment == null);

            var bestAvailableTempMin =
                   measurements.SingleOrDefault(x => x.Item2.DataType == DataType.TempMax && x.Item2.DataAdjustment == DataAdjustment.Adjusted)
                ?? measurements.SingleOrDefault(x => x.Item2.DataType == DataType.TempMax && x.Item2.DataAdjustment == null);

            if (bestAvailableTempMax != null && bestAvailableTempMin != null)
            {
                currentLocationFolder.DataSets.Add(
                    new DataSetLibraryEntry()
                    {
                        SourceSeriesSpecifications =
                            new DataSetLibraryEntry.SourceSeriesSpecification[]
                            {
                                new DataSetLibraryEntry.SourceSeriesSpecification
                                {
                                    DataType = DataType.TempMax,
                                    DataAdjustment = bestAvailableTempMax.Item2.DataAdjustment,
                                    SourceDataSetId = bestAvailableTempMax.Item1.Id,
                                    LocationId = CurrentLocation.Id,
                                    LocationName = CurrentLocation.Name
                                },
                                new DataSetLibraryEntry.SourceSeriesSpecification
                                {
                                    DataType = DataType.TempMin,
                                    DataAdjustment = bestAvailableTempMin.Item2.DataAdjustment,
                                    SourceDataSetId = bestAvailableTempMin.Item1.Id,
                                    LocationId = CurrentLocation.Id,
                                    LocationName = CurrentLocation.Name
                                }
                            },
                        SeriesDerivationType = ClimateExplorer.Core.DataPreparation.SeriesDerivationTypes.DifferenceBetweenTwoSeries,
                        Name = "Daily temperature range"
                    });

                currentLocationFolder.DataSets.Add(
                    new DataSetLibraryEntry()
                    {
                        SourceSeriesSpecifications =
                            new DataSetLibraryEntry.SourceSeriesSpecification[]
                            {
                                new DataSetLibraryEntry.SourceSeriesSpecification
                                {
                                    DataType = DataType.TempMax,
                                    DataAdjustment = bestAvailableTempMax.Item2.DataAdjustment,
                                    SourceDataSetId = bestAvailableTempMax.Item1.Id,
                                    LocationId = CurrentLocation.Id,
                                    LocationName = CurrentLocation.Name
                                },
                                new DataSetLibraryEntry.SourceSeriesSpecification
                                {
                                    DataType = DataType.TempMin,
                                    DataAdjustment = bestAvailableTempMin.Item2.DataAdjustment,
                                    SourceDataSetId = bestAvailableTempMin.Item1.Id,
                                    LocationId = CurrentLocation.Id,
                                    LocationName = CurrentLocation.Name
                                }
                            },
                        SeriesDerivationType = ClimateExplorer.Core.DataPreparation.SeriesDerivationTypes.AverageOfMultipleSeries,
                        Name = "Average of maximum and minimum temperatures"
                    });
            }

            RootFolders.Add(currentLocationFolder);

            if (PreviousLocation != null)
            {
                var measurementsForPreviousLocation = DataSetDefinitionViewModel.GetMeasurementsForLocation(DataSetDefinitions!, PreviousLocation.Id);

                var comparisonFolder =
                    new DataSetLibraryFolder()
                    {
                        Name = $"{CurrentLocation.Name} relative to {PreviousLocation.Name}",
                        DataSets = new List<DataSetLibraryEntry>()
                    };

                foreach (var measurementAtCurrentLocation in measurements)
                {
                    // Look for a matching measurement at new site
                    var bestMatchingMeasurementAtPreviousLocation =
                        measurementsForPreviousLocation
                        .SingleOrDefault(x => x.Item2.DataType == measurementAtCurrentLocation.Item2.DataType && x.Item2.DataAdjustment == measurementAtCurrentLocation.Item2.DataAdjustment);

                    if (bestMatchingMeasurementAtPreviousLocation != null)
                    {
                        comparisonFolder.DataSets.Add(
                            new DataSetLibraryEntry()
                                {
                                    SourceSeriesSpecifications =
                                        new DataSetLibraryEntry.SourceSeriesSpecification[]
                                        {
                                            new DataSetLibraryEntry.SourceSeriesSpecification
                                            {
                                                DataType = bestMatchingMeasurementAtPreviousLocation.Item2.DataType,
                                                DataAdjustment = bestMatchingMeasurementAtPreviousLocation.Item2.DataAdjustment,
                                                SourceDataSetId = bestMatchingMeasurementAtPreviousLocation.Item1.Id,
                                                LocationId = PreviousLocation.Id,
                                                LocationName = PreviousLocation.Name
                                            },
                                            new DataSetLibraryEntry.SourceSeriesSpecification
                                            {
                                                DataType = measurementAtCurrentLocation.Item2.DataType,
                                                DataAdjustment = measurementAtCurrentLocation.Item2.DataAdjustment,
                                                SourceDataSetId = measurementAtCurrentLocation.Item1.Id,
                                                LocationId = CurrentLocation.Id,
                                                LocationName = CurrentLocation.Name
                                            }
                                        },
                                    SeriesDerivationType = ClimateExplorer.Core.DataPreparation.SeriesDerivationTypes.DifferenceBetweenTwoSeries,
                                    Name = BuildDataSetName(measurementAtCurrentLocation.Item2, measurementAtCurrentLocation.Item1)
                                });
                    }
                }

                RootFolders.Add(comparisonFolder);
            }
        }

        RootFolders.AddRange(
            new DataSetLibraryFolder[]
            {
                new DataSetLibraryFolder
                {
                    Name = "Atmospheric gases",
                    DataSets =
                        new List<DataSetLibraryEntry>()
                        {
                            new DataSetLibraryEntry()
                            {
                                Name = "CO₂ (Carbon Dioxide) parts per million",
                                SourceSeriesSpecifications = 
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("42c9195e-edc0-4894-97dc-923f9d5e72f0"),
                                            DataType = DataType.CO2
                                        }
                                    }
                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "CH₄ (Methane) parts per billion",
                                SourceSeriesSpecifications = 
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("2debe203-cbaa-4015-977c-2f40e2782547"),
                                            DataType = DataType.CH4
                                        }
                                    }

                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "N₂O (Nitrous Oxide) parts per billion",
                                SourceSeriesSpecifications = 
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("6e84e743-3c77-488f-8a1c-152306c3d6f0"),
                                            DataType = DataType.N2O
                                        }
                                    }
                            }
                        }
                },
                new DataSetLibraryFolder
                {
                    Name = "ENSO",
                    DataSets =
                        new List<DataSetLibraryEntry>()
                        {
                            new DataSetLibraryEntry()
                            {
                                Name = "Multivariate ENSO index (MEI.v2)",
                                SourceSeriesSpecifications = 
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("ffd5f5e2-d8df-4779-a7f4-f5d148505033"),
                                            DataType = DataType.MEIv2
                                        }
                                    }
                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "Southern Oscillation Index (SOI)",
                                SourceSeriesSpecifications = 
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("c31270fa-b207-4d8f-b68e-4995698f1a4d"),
                                            DataType = DataType.SOI
                                        }
                                    }
                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "Niño 3.4",
                                SourceSeriesSpecifications = 
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("bfbaa69b-c10d-4de3-a78c-1ed6ff307327"),
                                            DataType = DataType.Nino34
                                        }
                                    }
                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "Oceanic Niño Index (ONI)",
                                SourceSeriesSpecifications = 
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("1042147a-8625-4ee7-bb5a-f0f17795c393"),
                                            DataType = DataType.ONI
                                        }
                                    }
                            }
                        }
                },
                new DataSetLibraryFolder
                {
                    Name = "Indian Ocean Dipole",
                    DataSets =
                        new List<DataSetLibraryEntry>()
                        {
                            new DataSetLibraryEntry()
                            {
                                Name = "Indian Ocean Dipole (IOD)",
                                SourceSeriesSpecifications = 
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("a3841b12-2dd4-424b-a96e-c35ddba66efc"),
                                            DataType = DataType.IOD
                                        }
                                    }
                            }
                        }
                },
                new DataSetLibraryFolder
                {
                    Name = "Cryosphere",
                    DataSets =
                        new List<DataSetLibraryEntry>()
                        {
                            new DataSetLibraryEntry()
                            {
                                Name = "Antarctic sea ice extent",
                                SourceSeriesSpecifications =
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("EC8AF0AC-215F-4D9C-9770-CC24EE24FBC7"),
                                            DataType = DataType.SouthSeaIce
                                        }
                                    }
                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "Arctic sea ice extent",
                                SourceSeriesSpecifications =
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("4EA1E30B-AF74-4BE8-B55D-C28764CF384E"),
                                            DataType = DataType.NorthSeaIce
                                        }
                                    }
                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "Greenland ice melt area",
                                SourceSeriesSpecifications =
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("6484a7f8-43bc-4b16-8c4d-9168f8d6699c"),
                                            DataType = DataType.GreenlandIceMelt
                                        }
                                    }
                            },
                        }
                },
                new DataSetLibraryFolder
                {
                    Name = "Solar",
                    DataSets =
                        new List<DataSetLibraryEntry>()
                        {
                            new DataSetLibraryEntry()
                            {
                                Name = "Sunspot number",
                                SourceSeriesSpecifications =
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("E2D9A74B-3C30-4332-8B22-26BB14A0BDC7"),
                                            DataType = DataType.SunspotNumber
                                        }
                                    }
                            },
                            new DataSetLibraryEntry()
                            {
                                Name = "Total solar irradiance",
                                SourceSeriesSpecifications =
                                    new DataSetLibraryEntry.SourceSeriesSpecification[]
                                    {
                                        new DataSetLibraryEntry.SourceSeriesSpecification
                                        {
                                            SourceDataSetId = Guid.Parse("E45293F9-B7AC-4874-9544-25E006B6B998"),
                                            DataType = DataType.SolarRadiation
                                        }
                                    }
                            },
                        }
                },
            }
        );
    }



    async void AddDataSet(DataSetLibraryEntry dle)
    {
        await OnAddDataSet.InvokeAsync(dle);
    }
}
