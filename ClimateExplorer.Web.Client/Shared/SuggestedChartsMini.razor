@using ClimateExplorer.Core.Model;
@using ClimateExplorer.Core.ViewModel
@using ClimateExplorer.Web.UiModel
@using Blazorise
@using Blazorise.Components
@using Blazorise.Charts
@using Blazorise.LoadingIndicator
@using ClimateExplorer.Core.DataPreparation
@using static ClimateExplorer.Web.UiModel.SuggestedPresetLists;
@using static ClimateExplorer.Core.Enums

<LoadingIndicator @bind-Visible="@LoadingIndicatorVisible">
    <div class="suggested-data-set-list">
        @if (SuggestedPresets != null)
        {
            foreach (var s in SuggestedPresets)
            {
                <div class="@CalculateClassForSuggestedDataSetElement(s)">
                    <div class="main" @onclick="() => OnChartPresetSelected.InvokeAsync(s.ChartSeriesList)">
                        <div class="title">@s.Title
                            <span class="tooltip-content">
                                @s.Description
                            </span>
                        </div>
                        @if (s.MissingChartSeries)
                        {
                            <div class="missing-chart-series"><i class="fas fa-info-circle"></i> Some data not available</div>
                        }
                    </div>
                </div>
            }
            <div class="suggested-data-set">
                <div class="main" @onclick="() => OnClickCollapser.InvokeAsync()">
                    <div class="title">
                        More...
                    </div>
                </div>
            </div>
        }
    </div>
</LoadingIndicator>

@code {
    [Parameter]
    public IEnumerable<DataSetDefinitionViewModel>? DataSetDefinitions { get; set; }

    [Parameter]
    public Location? SelectedLocation { get; set; }

    [Parameter]
    public EventCallback<List<ChartSeriesDefinition>> OnChartPresetSelected { get; set; }

    [Parameter]
    public EventCallback OnClickCollapser { get; set; }

    List<SuggestedChartPresetModelWithVariants>? SuggestedPresets { get; set; }

    bool LoadingIndicatorVisible { get; set; }

    string CalculateClassForSuggestedDataSetElement(SuggestedChartPresetModel s)
    {
        string c = "suggested-data-set";

        if (s.MenuExpanded) c += " menu-expanded";

        return c;
    }

    protected override void OnParametersSet()
    {
        LoadingIndicatorVisible = true;

        if (DataSetDefinitions == null || SelectedLocation == null)
        {
            return;
        }

        SuggestedPresets = SuggestedPresetLists.LocationBasedPresetsMini(DataSetDefinitions, SelectedLocation!);

        // Presets may call for data that is not available at all locations. In those
        // cases, remove the ChartSeries entries that aren't available & set a flag
        // on the preset so that an indicator can be shown to the user.
        foreach (var p in SuggestedPresets!.Where(x => x.ChartSeriesList != null))
        {
            p.MissingChartSeries = false;

            foreach (var csd in p.ChartSeriesList!.ToArray())
            {
                if (!csd.SourceSeriesSpecifications!.Any() || csd.SourceSeriesSpecifications!.Any(x => x.MeasurementDefinition == null))
                {
                    p.ChartSeriesList.Remove(csd);

                    p.MissingChartSeries = true;
                }
            }

            if (p.Variants != null)
            {
                foreach (var v in p.Variants)
                {
                    v.MissingChartSeries = false;

                    foreach (var csd in v.ChartSeriesList!.ToArray())
                    {
                        if (!csd.SourceSeriesSpecifications!.Any() || csd.SourceSeriesSpecifications!.Any(x => x.MeasurementDefinition == null))
                        {
                            v.ChartSeriesList.Remove(csd);

                            v.MissingChartSeries = true;
                        }
                    }
                }
            }
        }

        LoadingIndicatorVisible = false;
    }
}