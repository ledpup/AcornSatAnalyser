﻿@using Blazorise
@using Blazorise.LoadingIndicator
@using ClimateExplorer.Core
@using ClimateExplorer.Core.Model
@using ClimateExplorer.Core.ViewModel
@using ClimateExplorer.Web.UiModel
@using ClimateExplorer.Core.Calculators
@using ClimateExplorer.Core.DataPreparation
@using static ClimateExplorer.Core.Enums

<LoadingIndicator @bind-Visible="@LocationLoadingIndicatorVisible" ZIndex="5">
    <Collapsible @ref="LocationCollapsible" Title="@Location?.Title" FullTitle="@Location?.FullTitle" OnShowOrHide="OverviewShowOrHideHandler" InitiallyShown="true" CollapserSize="Collapsible.CollapserSizes.ExtraLarge">
        <HeaderContent>
            <span class="chart-controls">
                <a class="chart-control" @onclick="() => ChangeLocationClicked(new EventArgs())"><i class="fas fa-map"></i> Change location</a>
                @if (LocationCollapsible!.ShowContent)
                {
                    <a class="chart-control" @onclick="() => TogglePrecipitation()"><i class="@( precipitation ? "fas fa-check-square" : "fas fa-square" )"></i> Precipitation</a>
                }
            </span>
        </HeaderContent>
        <Content>
            <OverviewField Label="Location"><Value><a href="@LocationMapUrl" target="_blank">@GeoLocationAsString</a></Value></OverviewField>
            @if (WarmingAnomalyAsString != null && WarmingAnomalyAsString != "NA")
            {
                <OverviewField Label="Warming anomaly" PopupText="@WarmingAnomalyDescription"><Value>@(WarmingAnomalyAsString == null ? "NA" : WarmingAnomalyAsString)</Value></OverviewField>
                <OverviewField Label="Heating score" PopupText="@HeatingScoreDescription"><Value>@(Location!.HeatingScore == null ? "NA" : Location.HeatingScore)</Value></OverviewField>
            }
            @if (PrecipitationAnomalyAsString != null && PrecipitationAnomalyAsString != "NA")
            {
                <OverviewField Label="Precipitation anomaly"><Value>@(PrecipitationAnomalyAsString == null ? "NA" : PrecipitationAnomalyAsString)</Value></OverviewField>
            }
            <ClimateStripe UnitOfMeasure="UnitOfMeasure.DegreesCelsius" LocationName=@Location?.Name LocationMean=@TemperatureLocationMean DataRecords="@TemperatureAnomalyRecords" OnYearFilterChange=HandleOnYearFilterChange ShowInfo="true" />
            <WarmestYears DataRecords="@TemperatureAnomalyRecords" OnYearFilterChange=HandleOnYearFilterChange />
            @if (precipitation && PrecipitationLocationMean != null)
            {
                <ClimateStripe UnitOfMeasure="UnitOfMeasure.Millimetres" LocationName=@Location?.Name LocationMean=@PrecipitationLocationMean DataRecords="@PrecipitationAnomalyRecords" OnYearFilterChange=HandleOnPrecipitationYearFilterChange ShowInfo="false" />
                <DriestYears DataRecords="@PrecipitationAnomalyRecords" OnYearFilterChange=HandleOnPrecipitationYearFilterChange />
            }
        </Content>
    </Collapsible>
</LoadingIndicator>

@code {
    [Inject]
    public IDataService? DataService { get; set; }

    [Inject]
    ILogger<LocationInfo>? Logger { get; set; }

    [Parameter]
    public Location? Location { get; set; }

    [Parameter]
    public EventCallback RequestLocationChange { get; set; }

    [Parameter]
    public IEnumerable<DataSetDefinitionViewModel>? DataSetDefinitions { get; set; }

    [Parameter]
    public EventCallback<bool> OnOverviewShowOrHide { get; set; }

    [Parameter]
    public EventCallback<YearAndDataTypeFilter> OnYearFilterChange { get; set; }

    Collapsible? LocationCollapsible;

    Guid instanceId = Guid.NewGuid();

    string LocationMapUrl => Location == null ? "https://maps.google.com/" : $"https://maps.google.com/?q={Location.Coordinates.Latitude},{Location.Coordinates.Longitude}";
    string GeoLocationAsString => Location == null ? "Nowhere" : Location.Coordinates.ToString();

    public bool LocationLoadingIndicatorVisible { get; set; }
    bool precipitation { get; set; }

    List<YearAndValue>? TemperatureAnomalyRecords { get; set; }
    float? TemperatureLocationMean { get; set; }
    string? WarmingAnomalyDescription;
    string? WarmingAnomalyAsString;

    List<YearAndValue>? PrecipitationAnomalyRecords { get; set; }
    float? PrecipitationLocationMean { get; set; }
    string? PrecipitationAnomalyAsString;

    Guid? locationIdLastTimeOnParametersSetAsyncWasCalled;

    DataType? TemperatureDataType { get; set; }

    string? HeatingScoreDescription;
    IEnumerable<HeatingScoreRow>? HeatingScoreTable { get; set; }

    public void ChangeLocationClicked(EventArgs args)
    {
        RequestLocationChange.InvokeAsync();
    }

    void OverviewShowOrHideHandler(bool showOrHide)
    {
        OnOverviewShowOrHide.InvokeAsync(showOrHide);
    }

    protected override void OnInitialized()
    {
        LocationLoadingIndicatorVisible = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Location == null)
        {
            return;
        }

        // We do manual change detection here because Blazor calls OnParametersSetAsync() repeatedly with the same input values.
        if (locationIdLastTimeOnParametersSetAsyncWasCalled == Location?.Id)
        {
            return;
        }
        LocationLoadingIndicatorVisible = true;
        locationIdLastTimeOnParametersSetAsyncWasCalled = Location?.Id;

        // Clear the previous values so we don't accidentally end-up reporting them
        PrecipitationLocationMean = null;
        PrecipitationAnomalyRecords = null;
        PrecipitationAnomalyAsString = null;

        // We can't do anything until we're supplied our tasty, tasty DataSetDefinitions
        if (DataSetDefinitions == null)
        {
            return;
        }

        await GetData(new List<DataSubstitute> { new DataSubstitute { DataType = DataType.Precipitation } }, ContainerAggregationFunctions.Sum);
        await GetData(DataSubstitute.StandardTemperatureDataMatches(), ContainerAggregationFunctions.Mean);

        BuildHeatingScoreDescription();

        LocationLoadingIndicatorVisible = false;

        await base.OnParametersSetAsync();
    }

    protected void BuildHeatingScoreDescription()
    {
        if (HeatingScoreTable == null || Location == null)
        {
            return;
        }

        HeatingScoreDescription = $@"<p>The heating score is a number between 0 and 9. It is calculated by ordering all warming anomalies across the locations in the dataset into 10 sets of <a href=""https://en.wikipedia.org/wiki/Percentile"" target=""_blank"">percentiles</a>. Each set is a single heating score and it represents 10% of the total number of locations.</p>
<p>For example, the top ten 10% of warming anomalies are scored as a 9, the bottom 10% are scored as 0.</p>
<p>Negative warming anomalies are scored differently; they use the warming anomaly, rounded to zero decimal places as the score. This is to highlight any location that has not warmed.</p>
<p>Although the heating score compares locations, its not a fully standardised metric. The biggest influences of scores between locations are:</p>
<ul>
<li>The station(s) has been operating for a long time. The effect of global warming is more obvious with many records as temperatures in the past were cooler.</li>
<li>The location is inland. The ocean is warming more slowly compared with the land. Coastal locations are therefore likely to have warmed less than inland locations.</li>
</ul>
<p>The table below lists each heating score and the range of warming anomalies that bound the score. Note: the heating score for {Location.Name} is highlighted - its warming anomaly is <strong>{Location.WarmingAnomaly!.Value.ToString("0.00")}°C</strong>.</p>";

        HeatingScoreDescription += "<table class=\"table table-bordered table-sm\">";

        HeatingScoreDescription += "<tr><th>Heating score</th><th>Warming anomaly range (°C)</th></tr>";

        foreach (var heatingScoreRow in HeatingScoreTable)
        {
            var highlight = Location.HeatingScore == heatingScoreRow.Score ? " class=\"table-info\"" : null;
            HeatingScoreDescription += $"<tr{highlight}><td>{heatingScoreRow.Score}</td><td>{heatingScoreRow.MinimumWarmingAnomaly.ToString("0.00")} - {heatingScoreRow.MaximumWarmingAnomaly.ToString("0.00")}</td></tr>";
        }

        HeatingScoreDescription += "</table>";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            HeatingScoreTable = await DataService!.GetHeatingScoreTable();
        }
    }

    protected async Task GetData(List<DataSubstitute> dataSubstitutes, ContainerAggregationFunctions function)
    {
        var measurementForLocation =
            DataSetDefinitionViewModel.GetDataSetDefinitionAndMeasurement(
                DataSetDefinitions!,
                Location!.Id,
                dataSubstitutes,
                throwIfNoMatch: false);

        if (measurementForLocation != null)
        {
            var series =
                await DataService!.PostDataSet(
                    BinGranularities.ByYear,
                    function,
                    function,
                    function,
                    SeriesValueOptions.Value,
                    new SeriesSpecification[]
                        {
                            new SeriesSpecification
                            {
                                DataAdjustment = measurementForLocation.MeasurementDefinition!.DataAdjustment,
                                DataSetDefinitionId = measurementForLocation.DataSetDefinition!.Id,
                                DataType = measurementForLocation.MeasurementDefinition.DataType,
                                LocationId = Location.Id
                            }
                        },
                    SeriesDerivationTypes.ReturnSingleSeries,
                    1.0f,
                    1.0f,
                    0.7f,
                    14,
                    SeriesTransformations.Identity);

            var average = series.DataRecords.Average(x => x.Value)!.Value;

            var anomalyRecords =
                series.DataRecords
                .Where(x => x.Value != null)
                .Select(x => new YearAndValue(((YearBinIdentifier)BinIdentifier.Parse(x.BinId!)).Year, x.Value!.Value - average))
                .ToList();

            var index = AnomalyCalculator.CalculateAnomaly(series.DataRecords);

            if (dataSubstitutes.Any(x => x.DataType == DataType.Precipitation))
            {
                PrecipitationAnomalyAsString = GetPrecipitationAnomalyAsString(index);
                PrecipitationLocationMean = series.DataRecords.Average(x => x.Value);
                PrecipitationAnomalyRecords = anomalyRecords;
            }
            else if (dataSubstitutes.Any(x => x.DataType == DataType.TempMax))
            {
                TemperatureDataType = series.DataType;
                WarmingAnomalyAsString = GetWarmingAnomalyAsString(index);
                WarmingAnomalyDescription = GenerateWarmingAnomalyDescription(index);
                TemperatureLocationMean = series.DataRecords.Average(x => x.Value);
                TemperatureAnomalyRecords = anomalyRecords;
            }
            else
            {
                throw new NotImplementedException();
            }
        }

    }

    public async Task HandleOnYearFilterChange(short year)
    {
        var yearAndFilter = new YearAndDataTypeFilter(year) { DataType = TemperatureDataType };
        await OnYearFilterChange.InvokeAsync(yearAndFilter);
    }

    public async Task HandleOnPrecipitationYearFilterChange(short year)
    {
        var yearAndFilter = new YearAndDataTypeFilter(year) { DataType = DataType.Precipitation };
        await OnYearFilterChange.InvokeAsync(yearAndFilter);
    }

    static string GetPrecipitationAnomalyAsString(CalculatedAnomaly anomaly)
    {
        if (anomaly == null) return "NA";

        var value = anomaly.AnomalyValue;

        return $"{(value >= 0 ? "+" : "")}{string.Format("{0:0}", value)}mm";
    }

    static string GetWarmingAnomalyAsString(CalculatedAnomaly warmingAnomaly)
    {
        if (warmingAnomaly == null) return "NA";

        return $"{(warmingAnomaly.AnomalyValue >= 0 ? "+" : "")}{string.Format("{0:0.0}", warmingAnomaly.AnomalyValue)}°C";
    }

    string GenerateWarmingAnomalyDescription(CalculatedAnomaly warmingAnomaly)
    {
        if (Location == null)
        {
            return "NA";
        }

        string warmingAnomalyAsString = GetWarmingAnomalyAsString(warmingAnomaly);

        if (warmingAnomaly == null)
        {
            return $@"<p>The warming anomaly is the temperature difference between the average of the last 30 years of temperatures compared with the average of the first half of the dataset. 30 years was chosen to fit the convention of the <a href=""https://en.wikipedia.org/wiki/Climatological_normal"" target=""_blank"">climatological normal</a>. The first half of the dataset is used as a proxy for a natural baseline; it is expected to be less affected by anthropogenic warming.</p>
<p>Over the long-term, with no external influences, we'd expect the warming anomaly to trend towards zero. A non-zero warming anomaly may indicate an effect of climate change. A positive warming anomaly may indicate global warming.</p>
<p>A minimum of 60 years of data is required to calculate a warming anomaly.</p>
<p>Note: The mean temperature is used for most of the world (i.e., when using the GHCNm dataset). We use the maximum temperatures (usually a daily maximum) for this calculation in Australia and New Zealand.</p>";
        }

        return
            String.Join(
                Environment.NewLine,
                $"<p>The warming anomaly is the temperature difference between the average of the last 30 years of temperatures compared with the average of the first half ({warmingAnomaly.CountOfFirstHalf} years) of the dataset. 30 years was chosen to fit the convention of the <a href=\"https://en.wikipedia.org/wiki/Climatological_normal\" target=\"_blank\">climatological normal</a>. The first half of the dataset is used as a proxy for a natural baseline; it is expected to be less affected by anthropogenic warming.</p>",
                $"<div>{Location.Name}, between the years {warmingAnomaly.FirstYearInLast30Years}-{warmingAnomaly.LastYearInLast30Years}, had an average temperature of <strong>{string.Format("{0:0.00}", warmingAnomaly.AverageOfLast30Years)}°C</strong>.</div>",
                $"<div>{Location.Name}, between the years {warmingAnomaly.FirstYearInFirstHalf}-{warmingAnomaly.LastYearInFirstHalf}, had an average temperature of <strong>{string.Format("{0:0.00}", warmingAnomaly.AverageOfFirstHalf)}°C</strong>.</div>",
                $"<div>The difference is <strong>{warmingAnomalyAsString}</strong> (after rounding to 1 decimal place).</div><br/>",
                $"<p>Over the long-term, with no external influences, we'd expect the warming anomaly to trend towards zero. A non-zero warming anomaly may indicate an effect of climate change. A positive warming anomaly may indicate global warming.</p>",
                $"<p>A minimum of 60 years of data is required to calculate a warming anomaly.</p>",
                $"<p>Note: The mean temperature is used for most of the world (i.e., when using the GHCNm dataset). We use the maximum temperatures (usually a daily maximum) for this calculation in Australia and New Zealand.</p>"
            );
    }

    void TogglePrecipitation()
    {
        precipitation = !precipitation;
    }
}