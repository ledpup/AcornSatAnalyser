@using Blazorise
@using Blazorise.Components
@using ClimateExplorer.Core.Model;
@using GeoCoordinatePortable

<Modal @ref="modal">
    <ModalContent Size="ModalSize.Large">
        <ModalHeader Background="Background.Light">
            <ModalTitle>Change location</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            @if (SelectedLocation != null)
            {
                <Field>
                    Current location: <Strong>@SelectedLocation.FullTitle</Strong>
                </Field>
            }
            
            <Div Class="mt-3">Click the "near me" button to find the station closest to you (the browser will ask to "know your location").</Div>
            <Div Class="mt-1"><Button Clicked="@UseCurrentLocationClicked" Color="Color.Primary">Near me</Button></Div>

                @if (BrowserLocationErrorMessage != null)
                {
                    <Div class="error-message">
                        @BrowserLocationErrorMessage
                    </Div>
                }
            
            
            <Div Class="mt-3">Click "random locaiton" to go to a random location from around the world.</Div>
            <Div Class="mt-1"><Button Clicked="@RandomLocationClicked" Color="Color.Secondary">Random location</Button></Div>
            
            <Field Class="mt-3">
                <FieldLabel>Free text search for a location</FieldLabel>
                <Autocomplete TItem="Location"
                              TValue="Guid"
                              Data="@Locations"
                              TextField="@((item) => item.FullTitle)"
                              ValueField="@((item) => item.Id)"
                              Placeholder="Search..."
                              Filter="AutocompleteFilter.Contains"
                              FreeTyping
                              MinLength="2"
                              SelectedValueChanged="@FireOnLocationChange"
                              MaxMenuHeight="350px"
                              @bind-SelectedText="@selectedText" />
            </Field>
            @if (SelectedLocation != null && nearbyLocationCache != null && nearbyLocationCache!.ContainsKey(SelectedLocation.Id))
            {
                <Field>
                    <FieldLabel>Select a nearby location</FieldLabel>
                    <Alert Color="Color.Secondary" Visible="true">
                        <Table Borderless Narrow>
                            <TableBody>
                                @foreach (var row in SelectedLocation.NearbyLocations!)
                                {
                                    var location = nearbyLocationCache![SelectedLocation.Id]!.Single(x => x.Id == row.LocationId);
                                    <TableRow class="table-row">
                                        <TableRowCell>
                                            <Blazorise.Link Title="@location.Name"
                                                            To="#"
                                                            Clicked="@(()=>FireOnLocationChange(row.LocationId))">
                                                @location.Name
                                            </Blazorise.Link>
                                        </TableRowCell>
                                        <TableRowCell>@location.Country</TableRowCell>
                                        <TableRowCell>@(row.Distance) km</TableRowCell>
                                        <TableRowCell>
                                            <span>
                                                @row.CompassRoseDirection
                                                <span style="display: inline-block; transform: rotate(@($"{row.BearingDegrees}deg"))">⭡</span>
                                            </span>
                                        </TableRowCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                    </Alert>
                </Field>
            }
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    Modal? modal;

    [Parameter]
    public IEnumerable<Location>? Locations { get; set; }

    [Parameter]
    public Location? SelectedLocation { get; set; }

    [Parameter]
    public string? BrowserLocationErrorMessage { get; set; }

    [Parameter]
    public EventCallback<Guid> OnLocationChange { get; set; }

    [Parameter]
    public EventCallback SetCurrentLocation { get; set; }

    Dictionary<Guid, List<Location>>? nearbyLocationCache;

    string? selectedText;

    protected override void OnInitialized()
    {
        nearbyLocationCache = new Dictionary<Guid, List<Location>>();
    }

    protected override void OnParametersSet()
    {
        if (Locations != null && SelectedLocation != null && !nearbyLocationCache!.ContainsKey(SelectedLocation.Id))
        {            
            var locations = new List<Location>();
            SelectedLocation!.NearbyLocations!.ForEach(x => locations.Add(Locations.Single(y => y.Id == x.LocationId)));
            nearbyLocationCache.Add(SelectedLocation.Id, locations);
        }
    }

    public Task Show()
    {
        selectedText = null;
        return modal!.Show();
    }

    public Task Hide()
    {
        return modal!.Hide();
    }

    async Task UseCurrentLocationClicked()
    {
        await SetCurrentLocation.InvokeAsync();
        await Hide();
    }

    async Task FireOnLocationChange(Guid locationId)
    {
        if (locationId != Guid.Empty)
        {
            await OnLocationChange.InvokeAsync(locationId);
            await Hide();
        }
    }

    async Task RandomLocationClicked()
    {
        var random = new Random();
        var randomLocation = random.Next(Locations!.Count());
        await OnLocationChange.InvokeAsync(Locations!.ToArray()[randomLocation].Id);
        await Hide();
    }
}